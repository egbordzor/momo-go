// Code generated by goa v3.1.2, DO NOT EDIT.
//
// getbalance endpoints
//
// Command:
// $ goa gen github.com/wondenge/momo-go/remittance/design

package getbalance

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "getbalance" service endpoints.
type Endpoints struct {
	Show endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "getbalance" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Show: NewShowEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "getbalance" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.Show = m(e.Show)
}

// NewShowEndpoint returns an endpoint function that calls the method "show" of
// service "getbalance".
func NewShowEndpoint(s Service, authJWTFn security.AuthJWTFunc) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ShowPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write"},
			RequiredScopes: []string{"api:read"},
		}
		var token string
		if p.Authorization != nil {
			token = *p.Authorization
		}
		ctx, err = authJWTFn(ctx, token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.Show(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedErrorreason(res, "default")
		return vres, nil
	}
}
