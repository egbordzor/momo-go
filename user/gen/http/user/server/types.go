// Code generated by goa v3.1.2, DO NOT EDIT.
//
// user HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/momo-go/user/design

package server

import (
	user "github.com/wondenge/momo-go/user/gen/user"
	userviews "github.com/wondenge/momo-go/user/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// CreatekeyRequestBody is the type of the "user" service "createkey" endpoint
// HTTP request body.
type CreatekeyRequestBody struct {
	// Resource ID of the created request to pay transaction.
	XReferenceID *string `form:"X-Reference-Id,omitempty" json:"X-Reference-Id,omitempty" xml:"X-Reference-Id,omitempty"`
}

// ListRequestBody is the type of the "user" service "list" endpoint HTTP
// request body.
type ListRequestBody struct {
	// Resource ID of the created request to pay transaction.
	XReferenceID *string `form:"X-Reference-Id,omitempty" json:"X-Reference-Id,omitempty" xml:"X-Reference-Id,omitempty"`
}

// CreateuserResponseBody is the type of the "user" service "createuser"
// endpoint HTTP response body.
type CreateuserResponseBody struct {
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreatekeyResponseBody is the type of the "user" service "createkey" endpoint
// HTTP response body.
type CreatekeyResponseBody struct {
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListResponseBody is the type of the "user" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ShowResponseBody is the type of the "user" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateuserBadRequestResponseBody is the type of the "user" service
// "createuser" endpoint HTTP response body for the "bad_request" error.
type CreateuserBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateuserInternalErrorResponseBody is the type of the "user" service
// "createuser" endpoint HTTP response body for the "internal_error" error.
type CreateuserInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatekeyBadRequestResponseBody is the type of the "user" service
// "createkey" endpoint HTTP response body for the "bad_request" error.
type CreatekeyBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatekeyInternalErrorResponseBody is the type of the "user" service
// "createkey" endpoint HTTP response body for the "internal_error" error.
type CreatekeyInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBadRequestResponseBody is the type of the "user" service "list" endpoint
// HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListInternalErrorResponseBody is the type of the "user" service "list"
// endpoint HTTP response body for the "internal_error" error.
type ListInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowBadRequestResponseBody is the type of the "user" service "show" endpoint
// HTTP response body for the "bad_request" error.
type ShowBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ShowInternalErrorResponseBody is the type of the "user" service "show"
// endpoint HTTP response body for the "internal_error" error.
type ShowInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewCreateuserResponseBody builds the HTTP response body from the result of
// the "createuser" endpoint of the "user" service.
func NewCreateuserResponseBody(res *userviews.ErrorreasonView) *CreateuserResponseBody {
	body := &CreateuserResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreatekeyResponseBody builds the HTTP response body from the result of
// the "createkey" endpoint of the "user" service.
func NewCreatekeyResponseBody(res *userviews.ErrorreasonView) *CreatekeyResponseBody {
	body := &CreatekeyResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "user" service.
func NewListResponseBody(res *userviews.ErrorreasonView) *ListResponseBody {
	body := &ListResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "user" service.
func NewShowResponseBody(res *userviews.ErrorreasonView) *ShowResponseBody {
	body := &ShowResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateuserBadRequestResponseBody builds the HTTP response body from the
// result of the "createuser" endpoint of the "user" service.
func NewCreateuserBadRequestResponseBody(res *goa.ServiceError) *CreateuserBadRequestResponseBody {
	body := &CreateuserBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateuserInternalErrorResponseBody builds the HTTP response body from
// the result of the "createuser" endpoint of the "user" service.
func NewCreateuserInternalErrorResponseBody(res *goa.ServiceError) *CreateuserInternalErrorResponseBody {
	body := &CreateuserInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatekeyBadRequestResponseBody builds the HTTP response body from the
// result of the "createkey" endpoint of the "user" service.
func NewCreatekeyBadRequestResponseBody(res *goa.ServiceError) *CreatekeyBadRequestResponseBody {
	body := &CreatekeyBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatekeyInternalErrorResponseBody builds the HTTP response body from the
// result of the "createkey" endpoint of the "user" service.
func NewCreatekeyInternalErrorResponseBody(res *goa.ServiceError) *CreatekeyInternalErrorResponseBody {
	body := &CreatekeyInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "list" endpoint of the "user" service.
func NewListBadRequestResponseBody(res *goa.ServiceError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListInternalErrorResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "user" service.
func NewListInternalErrorResponseBody(res *goa.ServiceError) *ListInternalErrorResponseBody {
	body := &ListInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowBadRequestResponseBody builds the HTTP response body from the result
// of the "show" endpoint of the "user" service.
func NewShowBadRequestResponseBody(res *goa.ServiceError) *ShowBadRequestResponseBody {
	body := &ShowBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewShowInternalErrorResponseBody builds the HTTP response body from the
// result of the "show" endpoint of the "user" service.
func NewShowInternalErrorResponseBody(res *goa.ServiceError) *ShowInternalErrorResponseBody {
	body := &ShowInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateuserPayload builds a user service createuser endpoint payload.
func NewCreateuserPayload(xReferenceID string, ocpApimSubscriptionKey string) *user.CreateuserPayload {
	v := &user.CreateuserPayload{}
	v.XReferenceID = xReferenceID
	v.OcpApimSubscriptionKey = ocpApimSubscriptionKey

	return v
}

// NewCreatekeyPayload builds a user service createkey endpoint payload.
func NewCreatekeyPayload(body *CreatekeyRequestBody, ocpApimSubscriptionKey string) *user.CreatekeyPayload {
	v := &user.CreatekeyPayload{
		XReferenceID: *body.XReferenceID,
	}
	v.OcpApimSubscriptionKey = ocpApimSubscriptionKey

	return v
}

// NewListPayload builds a user service list endpoint payload.
func NewListPayload(body *ListRequestBody, ocpApimSubscriptionKey string) *user.ListPayload {
	v := &user.ListPayload{
		XReferenceID: *body.XReferenceID,
	}
	v.OcpApimSubscriptionKey = ocpApimSubscriptionKey

	return v
}

// NewShowPayload builds a user service show endpoint payload.
func NewShowPayload(aPIUser string, ocpApimSubscriptionKey string) *user.ShowPayload {
	v := &user.ShowPayload{}
	v.APIUser = aPIUser
	v.OcpApimSubscriptionKey = ocpApimSubscriptionKey

	return v
}

// ValidateCreatekeyRequestBody runs the validations defined on
// CreatekeyRequestBody
func ValidateCreatekeyRequestBody(body *CreatekeyRequestBody) (err error) {
	if body.XReferenceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("X-Reference-Id", "body"))
	}
	return
}

// ValidateListRequestBody runs the validations defined on ListRequestBody
func ValidateListRequestBody(body *ListRequestBody) (err error) {
	if body.XReferenceID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("X-Reference-Id", "body"))
	}
	return
}
