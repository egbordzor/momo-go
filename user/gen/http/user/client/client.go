// Code generated by goa v3.1.2, DO NOT EDIT.
//
// user client HTTP transport
//
// Command:
// $ goa gen github.com/wondenge/momo-go/user/design

package client

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	goahttp "goa.design/goa/v3/http"
)

// Client lists the user service endpoint HTTP clients.
type Client struct {
	// Createuser Doer is the HTTP client used to make requests to the createuser
	// endpoint.
	CreateuserDoer goahttp.Doer

	// Createkey Doer is the HTTP client used to make requests to the createkey
	// endpoint.
	CreatekeyDoer goahttp.Doer

	// List Doer is the HTTP client used to make requests to the list endpoint.
	ListDoer goahttp.Doer

	// Show Doer is the HTTP client used to make requests to the show endpoint.
	ShowDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the user service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateuserDoer:      doer,
		CreatekeyDoer:       doer,
		ListDoer:            doer,
		ShowDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Createuser returns an endpoint that makes HTTP requests to the user service
// createuser server.
func (c *Client) Createuser() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateuserRequest(c.encoder)
		decodeResponse = DecodeCreateuserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateuserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateuserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "createuser", err)
		}
		return decodeResponse(resp)
	}
}

// Createkey returns an endpoint that makes HTTP requests to the user service
// createkey server.
func (c *Client) Createkey() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreatekeyRequest(c.encoder)
		decodeResponse = DecodeCreatekeyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreatekeyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatekeyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "createkey", err)
		}
		return decodeResponse(resp)
	}
}

// List returns an endpoint that makes HTTP requests to the user service list
// server.
func (c *Client) List() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeListRequest(c.encoder)
		decodeResponse = DecodeListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "list", err)
		}
		return decodeResponse(resp)
	}
}

// Show returns an endpoint that makes HTTP requests to the user service show
// server.
func (c *Client) Show() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeShowRequest(c.encoder)
		decodeResponse = DecodeShowResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildShowRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ShowDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("user", "show", err)
		}
		return decodeResponse(resp)
	}
}
