// Code generated by goa v3.1.2, DO NOT EDIT.
//
// user HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/momo-go/user/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	user "github.com/wondenge/momo-go/user/gen/user"
	userviews "github.com/wondenge/momo-go/user/gen/user/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateuserRequest instantiates a HTTP request object with method and
// path set to call the "user" service "createuser" endpoint
func (c *Client) BuildCreateuserRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateuserUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "createuser", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateuserRequest returns an encoder for requests sent to the user
// createuser server.
func EncodeCreateuserRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.CreateuserPayload)
		if !ok {
			return goahttp.ErrInvalidType("user", "createuser", "*user.CreateuserPayload", v)
		}
		{
			head := p.XReferenceID
			req.Header.Set(" X-Reference-Id", head)
		}
		{
			head := p.OcpApimSubscriptionKey
			req.Header.Set(" Ocp-Apim-Subscription-Key", head)
		}
		return nil
	}
}

// DecodeCreateuserResponse returns a decoder for responses returned by the
// user createuser endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateuserResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeCreateuserResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateuserResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "createuser", err)
			}
			p := NewCreateuserErrorreasonCreated(&body)
			view := "default"
			vres := &userviews.Errorreason{Projected: p, View: view}
			if err = userviews.ValidateErrorreason(vres); err != nil {
				return nil, goahttp.ErrValidationError("user", "createuser", err)
			}
			res := user.NewErrorreason(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateuserBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "createuser", err)
			}
			err = ValidateCreateuserBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "createuser", err)
			}
			return nil, NewCreateuserBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CreateuserInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "createuser", err)
			}
			err = ValidateCreateuserInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "createuser", err)
			}
			return nil, NewCreateuserInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "createuser", resp.StatusCode, string(body))
		}
	}
}

// BuildCreatekeyRequest instantiates a HTTP request object with method and
// path set to call the "user" service "createkey" endpoint
func (c *Client) BuildCreatekeyRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatekeyUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "createkey", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreatekeyRequest returns an encoder for requests sent to the user
// createkey server.
func EncodeCreatekeyRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.CreatekeyPayload)
		if !ok {
			return goahttp.ErrInvalidType("user", "createkey", "*user.CreatekeyPayload", v)
		}
		{
			head := p.OcpApimSubscriptionKey
			req.Header.Set(" Ocp-Apim-Subscription-Key", head)
		}
		body := NewCreatekeyRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("user", "createkey", err)
		}
		return nil
	}
}

// DecodeCreatekeyResponse returns a decoder for responses returned by the user
// createkey endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCreatekeyResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeCreatekeyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreatekeyResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "createkey", err)
			}
			p := NewCreatekeyErrorreasonCreated(&body)
			view := "default"
			vres := &userviews.Errorreason{Projected: p, View: view}
			if err = userviews.ValidateErrorreason(vres); err != nil {
				return nil, goahttp.ErrValidationError("user", "createkey", err)
			}
			res := user.NewErrorreason(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreatekeyBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "createkey", err)
			}
			err = ValidateCreatekeyBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "createkey", err)
			}
			return nil, NewCreatekeyBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body CreatekeyInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "createkey", err)
			}
			err = ValidateCreatekeyInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "createkey", err)
			}
			return nil, NewCreatekeyInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "createkey", resp.StatusCode, string(body))
		}
	}
}

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "user" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListUserPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the user list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("user", "list", "*user.ListPayload", v)
		}
		{
			head := p.OcpApimSubscriptionKey
			req.Header.Set(" Ocp-Apim-Subscription-Key", head)
		}
		body := NewListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("user", "list", err)
		}
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the user list
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeListResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "list", err)
			}
			p := NewListErrorreasonOK(&body)
			view := "default"
			vres := &userviews.Errorreason{Projected: p, View: view}
			if err = userviews.ValidateErrorreason(vres); err != nil {
				return nil, goahttp.ErrValidationError("user", "list", err)
			}
			res := user.NewErrorreason(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ListBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "list", err)
			}
			err = ValidateListBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "list", err)
			}
			return nil, NewListBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body ListInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "list", err)
			}
			err = ValidateListInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "list", err)
			}
			return nil, NewListInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "user" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		aPIUser string
	)
	{
		p, ok := v.(*user.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("user", "show", "*user.ShowPayload", v)
		}
		aPIUser = p.APIUser
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowUserPath(aPIUser)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the user show
// server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("user", "show", "*user.ShowPayload", v)
		}
		{
			head := p.OcpApimSubscriptionKey
			req.Header.Set(" Ocp-Apim-Subscription-Key", head)
		}
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the user show
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeShowResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "show", err)
			}
			p := NewShowErrorreasonOK(&body)
			view := "default"
			vres := &userviews.Errorreason{Projected: p, View: view}
			if err = userviews.ValidateErrorreason(vres); err != nil {
				return nil, goahttp.ErrValidationError("user", "show", err)
			}
			res := user.NewErrorreason(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body ShowBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "show", err)
			}
			err = ValidateShowBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "show", err)
			}
			return nil, NewShowBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body ShowInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "show", err)
			}
			err = ValidateShowInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "show", err)
			}
			return nil, NewShowInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "show", resp.StatusCode, string(body))
		}
	}
}
