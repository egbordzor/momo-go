// Code generated by goa v3.1.2, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen github.com/wondenge/momo-go/user/design

package user

import (
	"context"

	userviews "github.com/wondenge/momo-go/user/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the user service interface.
type Service interface {
	// Used to create an API user in the sandbox target environment
	Createuser(context.Context, *CreateuserPayload) (res *Errorreason, err error)
	// Used to create an API key for an API user in the sandbox target environment.
	Createkey(context.Context, *CreatekeyPayload) (res *Errorreason, err error)
	// Used to get API user information.
	List(context.Context, *ListPayload) (res *Errorreason, err error)
	// GET API User Details
	Show(context.Context, *ShowPayload) (res *Errorreason, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"createuser", "createkey", "list", "show"}

// CreateuserPayload is the payload type of the user service createuser method.
type CreateuserPayload struct {
	// Resource ID of the created request.
	XReferenceID string
	// Subscription Key.
	OcpApimSubscriptionKey string
}

// Errorreason is the result type of the user service createuser method.
type Errorreason struct {
	Code *string
	// message
	Message *string
}

// CreatekeyPayload is the payload type of the user service createkey method.
type CreatekeyPayload struct {
	// Resource ID of the created request to pay transaction.
	XReferenceID string
	// Subscription key which provides access to this API
	OcpApimSubscriptionKey string
}

// ListPayload is the payload type of the user service list method.
type ListPayload struct {
	// Resource ID of the created request to pay transaction.
	XReferenceID string
	// Subscription key which provides access to this API
	OcpApimSubscriptionKey string
}

// ShowPayload is the payload type of the user service show method.
type ShowPayload struct {
	// API User.
	APIUser string
	// Subscription key which provides access to this API
	OcpApimSubscriptionKey string
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewErrorreason initializes result type Errorreason from viewed result type
// Errorreason.
func NewErrorreason(vres *userviews.Errorreason) *Errorreason {
	return newErrorreason(vres.Projected)
}

// NewViewedErrorreason initializes viewed result type Errorreason from result
// type Errorreason using the given view.
func NewViewedErrorreason(res *Errorreason, view string) *userviews.Errorreason {
	p := newErrorreasonView(res)
	return &userviews.Errorreason{Projected: p, View: "default"}
}

// newErrorreason converts projected type Errorreason to service type
// Errorreason.
func newErrorreason(vres *userviews.ErrorreasonView) *Errorreason {
	res := &Errorreason{
		Code:    vres.Code,
		Message: vres.Message,
	}
	return res
}

// newErrorreasonView projects result type Errorreason to projected type
// ErrorreasonView using the "default" view.
func newErrorreasonView(res *Errorreason) *userviews.ErrorreasonView {
	vres := &userviews.ErrorreasonView{
		Code:    res.Code,
		Message: res.Message,
	}
	return vres
}
