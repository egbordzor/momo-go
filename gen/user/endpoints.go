// Code generated by goa v3.1.3, DO NOT EDIT.
//
// user endpoints
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package user

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "user" service endpoints.
type Endpoints struct {
	NewUser        endpoint.Endpoint
	NewKey         endpoint.Endpoint
	GetUser        endpoint.Endpoint
	GetUserDetails endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "user" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		NewUser:        NewNewUserEndpoint(s),
		NewKey:         NewNewKeyEndpoint(s),
		GetUser:        NewGetUserEndpoint(s),
		GetUserDetails: NewGetUserDetailsEndpoint(s),
	}
}

// Use applies the given middleware to all the "user" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.NewUser = m(e.NewUser)
	e.NewKey = m(e.NewKey)
	e.GetUser = m(e.GetUser)
	e.GetUserDetails = m(e.GetUserDetails)
}

// NewNewUserEndpoint returns an endpoint function that calls the method
// "NewUser" of service "user".
func NewNewUserEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*APIUser)
		return s.NewUser(ctx, p)
	}
}

// NewNewKeyEndpoint returns an endpoint function that calls the method
// "NewKey" of service "user".
func NewNewKeyEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*NewKeyPayload)
		return s.NewKey(ctx, p)
	}
}

// NewGetUserEndpoint returns an endpoint function that calls the method
// "GetUser" of service "user".
func NewGetUserEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetUserPayload)
		return s.GetUser(ctx, p)
	}
}

// NewGetUserDetailsEndpoint returns an endpoint function that calls the method
// "GetUserDetails" of service "user".
func NewGetUserDetailsEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(string)
		res, err := s.GetUserDetails(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedAPIUserResult(res, "default")
		return vres, nil
	}
}
