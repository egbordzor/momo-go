// Code generated by goa v3.1.3, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package user

import (
	"context"

	userviews "github.com/wondenge/momo-go/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the user service interface.
type Service interface {
	// Used to create an API user in the sandbox target environment.
	NewUser(context.Context, *APIUser) (res string, err error)
	// Used to create an API key for an API user in the sandbox target environment.
	NewKey(context.Context, *NewKeyPayload) (res *APIUserKeyResult, err error)
	// Used to get API user information.
	GetUser(context.Context, *GetUserPayload) (res string, err error)
	// GET API User Details
	GetUserDetails(context.Context, string) (res *APIUserResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"NewUser", "NewKey", "GetUser", "GetUserDetails"}

// APIUser is the payload type of the user service NewUser method.
type APIUser struct {
	// The provider callback host
	ProviderCallbackHost *string
}

// NewKeyPayload is the payload type of the user service NewKey method.
type NewKeyPayload struct {
	// Format - UUID.
	XReferenceID string
}

// APIUserKeyResult is the result type of the user service NewKey method.
type APIUserKeyResult struct {
	// The created API user key
	APIKey *string
}

// GetUserPayload is the payload type of the user service GetUser method.
type GetUserPayload struct {
	// Format - UUID.
	XReferenceID string
}

// APIUserResult is the result type of the user service GetUserDetails method.
type APIUserResult struct {
	// The provider callback host
	ProviderCallbackHost *string
	PaymentServerURL     *PaymentServerURL
	TargetEnvironment    *TargetEnvironment
}

type PaymentServerURL struct {
	// The payment server URL
	APIKey *string
}

type TargetEnvironment struct {
	// The target environment
	APIKey *string
}

// Error Reason
type ErrorReason struct {
	// Code
	Code *string
	// message
	Message *string
}

// Error returns an error description.
func (e *ErrorReason) Error() string {
	return "Error Reason"
}

// ErrorName returns "ErrorReason".
func (e *ErrorReason) ErrorName() string {
	return "not_found"
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewAPIUserResult initializes result type APIUserResult from viewed result
// type APIUserResult.
func NewAPIUserResult(vres *userviews.APIUserResult) *APIUserResult {
	return newAPIUserResult(vres.Projected)
}

// NewViewedAPIUserResult initializes viewed result type APIUserResult from
// result type APIUserResult using the given view.
func NewViewedAPIUserResult(res *APIUserResult, view string) *userviews.APIUserResult {
	p := newAPIUserResultView(res)
	return &userviews.APIUserResult{Projected: p, View: "default"}
}

// newAPIUserResult converts projected type APIUserResult to service type
// APIUserResult.
func newAPIUserResult(vres *userviews.APIUserResultView) *APIUserResult {
	res := &APIUserResult{
		ProviderCallbackHost: vres.ProviderCallbackHost,
	}
	if vres.PaymentServerURL != nil {
		res.PaymentServerURL = transformUserviewsPaymentServerURLViewToPaymentServerURL(vres.PaymentServerURL)
	}
	if vres.TargetEnvironment != nil {
		res.TargetEnvironment = transformUserviewsTargetEnvironmentViewToTargetEnvironment(vres.TargetEnvironment)
	}
	return res
}

// newAPIUserResultView projects result type APIUserResult to projected type
// APIUserResultView using the "default" view.
func newAPIUserResultView(res *APIUserResult) *userviews.APIUserResultView {
	vres := &userviews.APIUserResultView{
		ProviderCallbackHost: res.ProviderCallbackHost,
	}
	if res.PaymentServerURL != nil {
		vres.PaymentServerURL = transformPaymentServerURLToUserviewsPaymentServerURLView(res.PaymentServerURL)
	}
	if res.TargetEnvironment != nil {
		vres.TargetEnvironment = transformTargetEnvironmentToUserviewsTargetEnvironmentView(res.TargetEnvironment)
	}
	return vres
}

// transformUserviewsPaymentServerURLViewToPaymentServerURL builds a value of
// type *PaymentServerURL from a value of type *userviews.PaymentServerURLView.
func transformUserviewsPaymentServerURLViewToPaymentServerURL(v *userviews.PaymentServerURLView) *PaymentServerURL {
	if v == nil {
		return nil
	}
	res := &PaymentServerURL{
		APIKey: v.APIKey,
	}

	return res
}

// transformUserviewsTargetEnvironmentViewToTargetEnvironment builds a value of
// type *TargetEnvironment from a value of type
// *userviews.TargetEnvironmentView.
func transformUserviewsTargetEnvironmentViewToTargetEnvironment(v *userviews.TargetEnvironmentView) *TargetEnvironment {
	if v == nil {
		return nil
	}
	res := &TargetEnvironment{
		APIKey: v.APIKey,
	}

	return res
}

// transformPaymentServerURLToUserviewsPaymentServerURLView builds a value of
// type *userviews.PaymentServerURLView from a value of type *PaymentServerURL.
func transformPaymentServerURLToUserviewsPaymentServerURLView(v *PaymentServerURL) *userviews.PaymentServerURLView {
	if v == nil {
		return nil
	}
	res := &userviews.PaymentServerURLView{
		APIKey: v.APIKey,
	}

	return res
}

// transformTargetEnvironmentToUserviewsTargetEnvironmentView builds a value of
// type *userviews.TargetEnvironmentView from a value of type
// *TargetEnvironment.
func transformTargetEnvironmentToUserviewsTargetEnvironmentView(v *TargetEnvironment) *userviews.TargetEnvironmentView {
	if v == nil {
		return nil
	}
	res := &userviews.TargetEnvironmentView{
		APIKey: v.APIKey,
	}

	return res
}
