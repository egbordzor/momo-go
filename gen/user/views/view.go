// Code generated by goa v3.1.3, DO NOT EDIT.
//
// User views
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// APIUserResult is the viewed result type that is projected based on a view.
type APIUserResult struct {
	// Type to project
	Projected *APIUserResultView
	// View to render
	View string
}

// APIUserResultView is a type that runs validations on a projected type.
type APIUserResultView struct {
	// The provider callback host
	ProviderCallbackHost *string
	PaymentServerURL     *PaymentServerURLView
	TargetEnvironment    *TargetEnvironmentView
}

// PaymentServerURLView is a type that runs validations on a projected type.
type PaymentServerURLView struct {
	// The payment server URL
	APIKey *string
}

// TargetEnvironmentView is a type that runs validations on a projected type.
type TargetEnvironmentView struct {
	// The target environment
	APIKey *string
}

var (
	// APIUserResultMap is a map of attribute names in result type APIUserResult
	// indexed by view name.
	APIUserResultMap = map[string][]string{
		"default": []string{
			"providerCallbackHost",
			"paymentServerUrl",
			"targetEnvironment",
		},
	}
)

// ValidateAPIUserResult runs the validations defined on the viewed result type
// APIUserResult.
func ValidateAPIUserResult(result *APIUserResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAPIUserResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAPIUserResultView runs the validations defined on APIUserResultView
// using the "default" view.
func ValidateAPIUserResultView(result *APIUserResultView) (err error) {

	return
}

// ValidatePaymentServerURLView runs the validations defined on
// PaymentServerURLView.
func ValidatePaymentServerURLView(result *PaymentServerURLView) (err error) {

	return
}

// ValidateTargetEnvironmentView runs the validations defined on
// TargetEnvironmentView.
func ValidateTargetEnvironmentView(result *TargetEnvironmentView) (err error) {

	return
}
