// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Disbursement views
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// TokenPost200ApplicationJSONResponse is the viewed result type that is
// projected based on a view.
type TokenPost200ApplicationJSONResponse struct {
	// Type to project
	Projected *TokenPost200ApplicationJSONResponseView
	// View to render
	View string
}

// Balance is the viewed result type that is projected based on a view.
type Balance struct {
	// Type to project
	Projected *BalanceView
	// View to render
	View string
}

// TransferResult is the viewed result type that is projected based on a view.
type TransferResult struct {
	// Type to project
	Projected *TransferResultView
	// View to render
	View string
}

// TokenPost200ApplicationJSONResponseView is a type that runs validations on a
// projected type.
type TokenPost200ApplicationJSONResponseView struct {
	// A JWT token which can be used to authorize against the other API end-points.
	AccessToken *string
	// The token type.
	TokenType *string
	// The validity time in seconds of the token.
	ExpiresIn *int32
}

// BalanceView is a type that runs validations on a projected type.
type BalanceView struct {
	// The available balance of the account
	AvailableBalance *string
	// ISO4217 Currency
	Currency *string
}

// TransferResultView is a type that runs validations on a projected type.
type TransferResultView struct {
	// Amount that will be debited from the payer account.
	Amount *string
	// ISO4217 Currency
	Currency *string
	// Financial transactionIdd from mobile money manager
	FinancialTransactionID *string
	// External id is used as a reference to the transaction
	ExternalID *string
	Payee      *PartyView
	// Message that will be written in the payer transaction history message field.
	PayerMessage *string
	// Message that will be written in the payee transaction history note field.
	PayeeNote *string
	// Status
	Status *string
	Reason *ErrorReasonView
}

// PartyView is a type that runs validations on a projected type.
type PartyView struct {
	// PartyIdType
	PartyIDType *string
	PartyID     *string
}

// ErrorReasonView is a type that runs validations on a projected type.
type ErrorReasonView struct {
	// Code
	Code *string
	// message
	Message *string
}

var (
	// TokenPost200ApplicationJSONResponseMap is a map of attribute names in result
	// type TokenPost200ApplicationJSONResponse indexed by view name.
	TokenPost200ApplicationJSONResponseMap = map[string][]string{
		"default": []string{
			"access_token",
			"token_type",
			"expires_in",
		},
	}
	// BalanceMap is a map of attribute names in result type Balance indexed by
	// view name.
	BalanceMap = map[string][]string{
		"default": []string{
			"availableBalance",
			"currency",
		},
	}
	// TransferResultMap is a map of attribute names in result type TransferResult
	// indexed by view name.
	TransferResultMap = map[string][]string{
		"default": []string{
			"amount",
			"currency",
			"financialTransactionId",
			"externalId",
			"payee",
			"payeeNote",
			"status",
			"reason",
		},
	}
	// ErrorReasonMap is a map of attribute names in result type ErrorReason
	// indexed by view name.
	ErrorReasonMap = map[string][]string{
		"default": []string{
			"code",
			"message",
		},
	}
)

// ValidateTokenPost200ApplicationJSONResponse runs the validations defined on
// the viewed result type TokenPost200ApplicationJSONResponse.
func ValidateTokenPost200ApplicationJSONResponse(result *TokenPost200ApplicationJSONResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTokenPost200ApplicationJSONResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateBalance runs the validations defined on the viewed result type
// Balance.
func ValidateBalance(result *Balance) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBalanceView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateTransferResult runs the validations defined on the viewed result
// type TransferResult.
func ValidateTransferResult(result *TransferResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTransferResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateTokenPost200ApplicationJSONResponseView runs the validations defined
// on TokenPost200ApplicationJSONResponseView using the "default" view.
func ValidateTokenPost200ApplicationJSONResponseView(result *TokenPost200ApplicationJSONResponseView) (err error) {

	return
}

// ValidateBalanceView runs the validations defined on BalanceView using the
// "default" view.
func ValidateBalanceView(result *BalanceView) (err error) {

	return
}

// ValidateTransferResultView runs the validations defined on
// TransferResultView using the "default" view.
func ValidateTransferResultView(result *TransferResultView) (err error) {
	if result.Payee != nil {
		if err2 := ValidatePartyView(result.Payee); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Status != nil {
		if !(*result.Status == "PENDING" || *result.Status == "SUCCESSFUL" || *result.Status == "FAILED") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"PENDING", "SUCCESSFUL", "FAILED"}))
		}
	}
	if result.Reason != nil {
		if err2 := ValidateErrorReasonView(result.Reason); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePartyView runs the validations defined on PartyView.
func ValidatePartyView(result *PartyView) (err error) {
	if result.PartyIDType != nil {
		if !(*result.PartyIDType == "MSISDN" || *result.PartyIDType == "EMAIL" || *result.PartyIDType == "PARTY_CODE") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.partyIdType", *result.PartyIDType, []interface{}{"MSISDN", "EMAIL", "PARTY_CODE"}))
		}
	}
	return
}

// ValidateErrorReasonView runs the validations defined on ErrorReasonView
// using the "default" view.
func ValidateErrorReasonView(result *ErrorReasonView) (err error) {
	if result.Code != nil {
		if !(*result.Code == "PAYEE_NOT_FOUND" || *result.Code == "PAYER_NOT_FOUND" || *result.Code == "NOT_ALLOWED" || *result.Code == "NOT_ALLOWED_TARGET_ENVIRONMENT" || *result.Code == "INVALID_CALLBACK_URL_HOST" || *result.Code == "INVALID_CURRENCY" || *result.Code == "SERVICE_UNAVAILABLE" || *result.Code == "INTERNAL_PROCESSING_ERROR" || *result.Code == "NOT_ENOUGH_FUNDS" || *result.Code == "PAYER_LIMIT_REACHED" || *result.Code == "PAYEE_NOT_ALLOWED_TO_RECEIVE" || *result.Code == "PAYMENT_NOT_APPROVED" || *result.Code == "RESOURCE_NOT_FOUND" || *result.Code == "APPROVAL_REJECTED" || *result.Code == "EXPIRED" || *result.Code == "TRANSACTION_CANCELED" || *result.Code == "RESOURCE_ALREADY_EXIST") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.code", *result.Code, []interface{}{"PAYEE_NOT_FOUND", "PAYER_NOT_FOUND", "NOT_ALLOWED", "NOT_ALLOWED_TARGET_ENVIRONMENT", "INVALID_CALLBACK_URL_HOST", "INVALID_CURRENCY", "SERVICE_UNAVAILABLE", "INTERNAL_PROCESSING_ERROR", "NOT_ENOUGH_FUNDS", "PAYER_LIMIT_REACHED", "PAYEE_NOT_ALLOWED_TO_RECEIVE", "PAYMENT_NOT_APPROVED", "RESOURCE_NOT_FOUND", "APPROVAL_REJECTED", "EXPIRED", "TRANSACTION_CANCELED", "RESOURCE_ALREADY_EXIST"}))
		}
	}
	return
}
