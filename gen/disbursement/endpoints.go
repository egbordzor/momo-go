// Code generated by goa v3.1.3, DO NOT EDIT.
//
// disbursement endpoints
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package disbursement

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "disbursement" service endpoints.
type Endpoints struct {
	NewToken              endpoint.Endpoint
	GetBalance            endpoint.Endpoint
	RetrieveAccountHolder endpoint.Endpoint
	Transfer              endpoint.Endpoint
	TransferStatus        endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "disbursement" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		NewToken:              NewNewTokenEndpoint(s),
		GetBalance:            NewGetBalanceEndpoint(s),
		RetrieveAccountHolder: NewRetrieveAccountHolderEndpoint(s),
		Transfer:              NewTransferEndpoint(s),
		TransferStatus:        NewTransferStatusEndpoint(s),
	}
}

// Use applies the given middleware to all the "disbursement" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.NewToken = m(e.NewToken)
	e.GetBalance = m(e.GetBalance)
	e.RetrieveAccountHolder = m(e.RetrieveAccountHolder)
	e.Transfer = m(e.Transfer)
	e.TransferStatus = m(e.TransferStatus)
}

// NewNewTokenEndpoint returns an endpoint function that calls the method
// "NewToken" of service "disbursement".
func NewNewTokenEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(string)
		res, err := s.NewToken(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTokenPost200ApplicationJSONResponse(res, "default")
		return vres, nil
	}
}

// NewGetBalanceEndpoint returns an endpoint function that calls the method
// "GetBalance" of service "disbursement".
func NewGetBalanceEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(string)
		res, err := s.GetBalance(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBalance(res, "default")
		return vres, nil
	}
}

// NewRetrieveAccountHolderEndpoint returns an endpoint function that calls the
// method "RetrieveAccountHolder" of service "disbursement".
func NewRetrieveAccountHolderEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*RetrieveAccountHolderPayload)
		return s.RetrieveAccountHolder(ctx, p)
	}
}

// NewTransferEndpoint returns an endpoint function that calls the method
// "Transfer" of service "disbursement".
func NewTransferEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Transfer1)
		return s.Transfer(ctx, p)
	}
}

// NewTransferStatusEndpoint returns an endpoint function that calls the method
// "TransferStatus" of service "disbursement".
func NewTransferStatusEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TransferStatusPayload)
		res, err := s.TransferStatus(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTransferResult(res, "default")
		return vres, nil
	}
}
