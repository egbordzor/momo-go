// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Disbursement HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	disbursement "github.com/wondenge/momo-go/gen/disbursement"
	disbursementviews "github.com/wondenge/momo-go/gen/disbursement/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildNewTokenRequest instantiates a HTTP request object with method and path
// set to call the "Disbursement" service "NewToken" endpoint
func (c *Client) BuildNewTokenRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: NewTokenDisbursementPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Disbursement", "NewToken", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeNewTokenRequest returns an encoder for requests sent to the
// Disbursement NewToken server.
func EncodeNewTokenRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(string)
		if !ok {
			return goahttp.ErrInvalidType("Disbursement", "NewToken", "string", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Disbursement", "NewToken", err)
		}
		return nil
	}
}

// DecodeNewTokenResponse returns a decoder for responses returned by the
// Disbursement NewToken endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeNewTokenResponse may return the following errors:
//	- "unauthorized" (type *disbursement.TokenPost401ApplicationJSONResponse): http.StatusUnauthorized
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeNewTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body NewTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "NewToken", err)
			}
			p := NewNewTokenTokenPost200ApplicationJSONResponseOK(&body)
			view := "default"
			vres := &disbursementviews.TokenPost200ApplicationJSONResponse{Projected: p, View: view}
			if err = disbursementviews.ValidateTokenPost200ApplicationJSONResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "NewToken", err)
			}
			res := disbursement.NewTokenPost200ApplicationJSONResponse(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body NewTokenUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "NewToken", err)
			}
			return nil, NewNewTokenUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body NewTokenInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "NewToken", err)
			}
			err = ValidateNewTokenInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "NewToken", err)
			}
			return nil, NewNewTokenInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Disbursement", "NewToken", resp.StatusCode, string(body))
		}
	}
}

// BuildGetBalanceRequest instantiates a HTTP request object with method and
// path set to call the "Disbursement" service "GetBalance" endpoint
func (c *Client) BuildGetBalanceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetBalanceDisbursementPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Disbursement", "GetBalance", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetBalanceRequest returns an encoder for requests sent to the
// Disbursement GetBalance server.
func EncodeGetBalanceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(string)
		if !ok {
			return goahttp.ErrInvalidType("Disbursement", "GetBalance", "string", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Disbursement", "GetBalance", err)
		}
		return nil
	}
}

// DecodeGetBalanceResponse returns a decoder for responses returned by the
// Disbursement GetBalance endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetBalanceResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetBalanceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetBalanceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "GetBalance", err)
			}
			p := NewGetBalanceBalanceOK(&body)
			view := "default"
			vres := &disbursementviews.Balance{Projected: p, View: view}
			if err = disbursementviews.ValidateBalance(vres); err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "GetBalance", err)
			}
			res := disbursement.NewBalance(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body GetBalanceBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "GetBalance", err)
			}
			err = ValidateGetBalanceBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "GetBalance", err)
			}
			return nil, NewGetBalanceBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body GetBalanceInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "GetBalance", err)
			}
			err = ValidateGetBalanceInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "GetBalance", err)
			}
			return nil, NewGetBalanceInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Disbursement", "GetBalance", resp.StatusCode, string(body))
		}
	}
}

// BuildRetrieveAccountHolderRequest instantiates a HTTP request object with
// method and path set to call the "Disbursement" service
// "RetrieveAccountHolder" endpoint
func (c *Client) BuildRetrieveAccountHolderRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		accountHolderIDType string
		accountHolderID     string
	)
	{
		p, ok := v.(*disbursement.RetrieveAccountHolderPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Disbursement", "RetrieveAccountHolder", "*disbursement.RetrieveAccountHolderPayload", v)
		}
		if p.AccountHolderIDType != nil {
			accountHolderIDType = *p.AccountHolderIDType
		}
		if p.AccountHolderID != nil {
			accountHolderID = *p.AccountHolderID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RetrieveAccountHolderDisbursementPath(accountHolderIDType, accountHolderID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Disbursement", "RetrieveAccountHolder", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRetrieveAccountHolderResponse returns a decoder for responses returned
// by the Disbursement RetrieveAccountHolder endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeRetrieveAccountHolderResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeRetrieveAccountHolderResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "RetrieveAccountHolder", err)
			}
			return body, nil
		case http.StatusBadRequest:
			var (
				body RetrieveAccountHolderBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "RetrieveAccountHolder", err)
			}
			err = ValidateRetrieveAccountHolderBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "RetrieveAccountHolder", err)
			}
			return nil, NewRetrieveAccountHolderBadRequest(&body)
		case http.StatusInternalServerError:
			var (
				body RetrieveAccountHolderInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "RetrieveAccountHolder", err)
			}
			err = ValidateRetrieveAccountHolderInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "RetrieveAccountHolder", err)
			}
			return nil, NewRetrieveAccountHolderInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Disbursement", "RetrieveAccountHolder", resp.StatusCode, string(body))
		}
	}
}

// BuildTransferRequest instantiates a HTTP request object with method and path
// set to call the "Disbursement" service "Transfer" endpoint
func (c *Client) BuildTransferRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TransferDisbursementPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Disbursement", "Transfer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTransferRequest returns an encoder for requests sent to the
// Disbursement Transfer server.
func EncodeTransferRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*disbursement.Transfer1)
		if !ok {
			return goahttp.ErrInvalidType("Disbursement", "Transfer", "*disbursement.Transfer1", v)
		}
		body := NewTransferRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Disbursement", "Transfer", err)
		}
		return nil
	}
}

// DecodeTransferResponse returns a decoder for responses returned by the
// Disbursement Transfer endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeTransferResponse may return the following errors:
//	- "internal_error" (type *disbursement.ErrorReason): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "conflict" (type *goa.ServiceError): http.StatusConflict
//	- error: internal error
func DecodeTransferResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "Transfer", err)
			}
			return body, nil
		case http.StatusInternalServerError:
			var (
				body TransferInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "Transfer", err)
			}
			err = ValidateTransferInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "Transfer", err)
			}
			return nil, NewTransferInternalError(&body)
		case http.StatusBadRequest:
			var (
				body TransferBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "Transfer", err)
			}
			err = ValidateTransferBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "Transfer", err)
			}
			return nil, NewTransferBadRequest(&body)
		case http.StatusConflict:
			var (
				body TransferConflictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "Transfer", err)
			}
			err = ValidateTransferConflictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "Transfer", err)
			}
			return nil, NewTransferConflict(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Disbursement", "Transfer", resp.StatusCode, string(body))
		}
	}
}

// BuildTransferStatusRequest instantiates a HTTP request object with method
// and path set to call the "Disbursement" service "TransferStatus" endpoint
func (c *Client) BuildTransferStatusRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		referenceID string
	)
	{
		p, ok := v.(*disbursement.TransferStatusPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("Disbursement", "TransferStatus", "*disbursement.TransferStatusPayload", v)
		}
		referenceID = p.ReferenceID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TransferStatusDisbursementPath(referenceID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Disbursement", "TransferStatus", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeTransferStatusResponse returns a decoder for responses returned by the
// Disbursement TransferStatus endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeTransferStatusResponse may return the following errors:
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeTransferStatusResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TransferStatusResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "TransferStatus", err)
			}
			p := NewTransferStatusTransferResultOK(&body)
			view := "default"
			vres := &disbursementviews.TransferResult{Projected: p, View: view}
			if err = disbursementviews.ValidateTransferResult(vres); err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "TransferStatus", err)
			}
			res := disbursement.NewTransferResult(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body TransferStatusBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "TransferStatus", err)
			}
			err = ValidateTransferStatusBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "TransferStatus", err)
			}
			return nil, NewTransferStatusBadRequest(&body)
		case http.StatusNotFound:
			var (
				body TransferStatusNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "TransferStatus", err)
			}
			err = ValidateTransferStatusNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "TransferStatus", err)
			}
			return nil, NewTransferStatusNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body TransferStatusInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Disbursement", "TransferStatus", err)
			}
			err = ValidateTransferStatusInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Disbursement", "TransferStatus", err)
			}
			return nil, NewTransferStatusInternalError(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Disbursement", "TransferStatus", resp.StatusCode, string(body))
		}
	}
}

// marshalDisbursementPartyToPartyRequestBody builds a value of type
// *PartyRequestBody from a value of type *disbursement.Party.
func marshalDisbursementPartyToPartyRequestBody(v *disbursement.Party) *PartyRequestBody {
	if v == nil {
		return nil
	}
	res := &PartyRequestBody{
		PartyIDType: v.PartyIDType,
		PartyID:     v.PartyID,
	}

	return res
}

// marshalPartyRequestBodyToDisbursementParty builds a value of type
// *disbursement.Party from a value of type *PartyRequestBody.
func marshalPartyRequestBodyToDisbursementParty(v *PartyRequestBody) *disbursement.Party {
	if v == nil {
		return nil
	}
	res := &disbursement.Party{
		PartyIDType: v.PartyIDType,
		PartyID:     v.PartyID,
	}

	return res
}

// unmarshalPartyResponseBodyToDisbursementviewsPartyView builds a value of
// type *disbursementviews.PartyView from a value of type *PartyResponseBody.
func unmarshalPartyResponseBodyToDisbursementviewsPartyView(v *PartyResponseBody) *disbursementviews.PartyView {
	if v == nil {
		return nil
	}
	res := &disbursementviews.PartyView{
		PartyIDType: v.PartyIDType,
		PartyID:     v.PartyID,
	}

	return res
}

// unmarshalErrorReasonResponseBodyToDisbursementviewsErrorReasonView builds a
// value of type *disbursementviews.ErrorReasonView from a value of type
// *ErrorReasonResponseBody.
func unmarshalErrorReasonResponseBodyToDisbursementviewsErrorReasonView(v *ErrorReasonResponseBody) *disbursementviews.ErrorReasonView {
	if v == nil {
		return nil
	}
	res := &disbursementviews.ErrorReasonView{
		Code:    v.Code,
		Message: v.Message,
	}

	return res
}
