// Code generated by goa v3.1.3, DO NOT EDIT.
//
// disbursement HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package client

import (
	"encoding/json"
	"fmt"

	disbursement "github.com/wondenge/momo-go/gen/disbursement"
)

// BuildRetrieveAccountHolderPayload builds the payload for the disbursement
// RetrieveAccountHolder endpoint from CLI flags.
func BuildRetrieveAccountHolderPayload(disbursementRetrieveAccountHolderAccountHolderIDType string, disbursementRetrieveAccountHolderAccountHolderID string) (*disbursement.RetrieveAccountHolderPayload, error) {
	var accountHolderIDType string
	{
		accountHolderIDType = disbursementRetrieveAccountHolderAccountHolderIDType
	}
	var accountHolderID string
	{
		accountHolderID = disbursementRetrieveAccountHolderAccountHolderID
	}
	v := &disbursement.RetrieveAccountHolderPayload{}
	v.AccountHolderIDType = &accountHolderIDType
	v.AccountHolderID = &accountHolderID

	return v, nil
}

// BuildTransferPayload builds the payload for the disbursement Transfer
// endpoint from CLI flags.
func BuildTransferPayload(disbursementTransferBody string) (*disbursement.Transfer1, error) {
	var err error
	var body TransferRequestBody
	{
		err = json.Unmarshal([]byte(disbursementTransferBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": \"Quia voluptas tenetur repellendus.\",\n      \"currency\": \"Iure qui quo voluptatem ducimus.\",\n      \"externalId\": \"Vel qui libero sunt eos omnis laudantium.\",\n      \"payee\": {\n         \"partyId\": \"Corporis perspiciatis provident quis adipisci harum.\",\n         \"partyIdType\": \"EMAIL\"\n      },\n      \"payeeNote\": \"Illo id distinctio.\",\n      \"payerMessage\": \"Qui est sit dolor sunt.\"\n   }'")
		}
	}
	v := &disbursement.Transfer1{
		Amount:       body.Amount,
		Currency:     body.Currency,
		ExternalID:   body.ExternalID,
		PayerMessage: body.PayerMessage,
		PayeeNote:    body.PayeeNote,
	}
	if body.Payee != nil {
		v.Payee = marshalPartyRequestBodyToDisbursementParty(body.Payee)
	}

	return v, nil
}

// BuildTransferStatusPayload builds the payload for the disbursement
// TransferStatus endpoint from CLI flags.
func BuildTransferStatusPayload(disbursementTransferStatusReferenceID string) (*disbursement.TransferStatusPayload, error) {
	var referenceID string
	{
		referenceID = disbursementTransferStatusReferenceID
	}
	v := &disbursement.TransferStatusPayload{}
	v.ReferenceID = referenceID

	return v, nil
}
