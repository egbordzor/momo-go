// Code generated by goa v3.1.3, DO NOT EDIT.
//
// collection HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package client

import (
	"encoding/json"
	"fmt"

	collection "github.com/wondenge/momo-go/gen/collection"
)

// BuildRetrieveAccountHolderPayload builds the payload for the collection
// RetrieveAccountHolder endpoint from CLI flags.
func BuildRetrieveAccountHolderPayload(collectionRetrieveAccountHolderAccountHolderIDType string, collectionRetrieveAccountHolderAccountHolderID string) (*collection.RetrieveAccountHolderPayload, error) {
	var accountHolderIDType string
	{
		accountHolderIDType = collectionRetrieveAccountHolderAccountHolderIDType
	}
	var accountHolderID string
	{
		accountHolderID = collectionRetrieveAccountHolderAccountHolderID
	}
	v := &collection.RetrieveAccountHolderPayload{}
	v.AccountHolderIDType = accountHolderIDType
	v.AccountHolderID = accountHolderID

	return v, nil
}

// BuildPaymentRequestPayload builds the payload for the collection
// PaymentRequest endpoint from CLI flags.
func BuildPaymentRequestPayload(collectionPaymentRequestBody string) (*collection.RequestToPay, error) {
	var err error
	var body PaymentRequestRequestBody
	{
		err = json.Unmarshal([]byte(collectionPaymentRequestBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": \"Sunt aliquam pariatur ut magni quisquam.\",\n      \"currency\": \"Odit explicabo ex et.\",\n      \"externalId\": \"Et fugit officia.\",\n      \"payeeNote\": \"Dolorem ea.\",\n      \"payer\": {\n         \"partyId\": \"Corporis perspiciatis provident quis adipisci harum.\",\n         \"partyIdType\": \"EMAIL\"\n      },\n      \"payerMessage\": \"Mollitia qui quasi nostrum.\"\n   }'")
		}
	}
	v := &collection.RequestToPay{
		Amount:       body.Amount,
		Currency:     body.Currency,
		ExternalID:   body.ExternalID,
		PayerMessage: body.PayerMessage,
		PayeeNote:    body.PayeeNote,
	}
	if body.Payer != nil {
		v.Payer = marshalPartyRequestBodyToCollectionParty(body.Payer)
	}

	return v, nil
}

// BuildPaymentStatusPayload builds the payload for the collection
// PaymentStatus endpoint from CLI flags.
func BuildPaymentStatusPayload(collectionPaymentStatusReferenceID string) (*collection.PaymentStatusPayload, error) {
	var referenceID string
	{
		referenceID = collectionPaymentStatusReferenceID
	}
	v := &collection.PaymentStatusPayload{}
	v.ReferenceID = referenceID

	return v, nil
}
