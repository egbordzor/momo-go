// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Remittance HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package server

import (
	"context"
	"io"
	"net/http"

	remittance "github.com/wondenge/momo-go/gen/remittance"
	remittanceviews "github.com/wondenge/momo-go/gen/remittance/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeNewTokenResponse returns an encoder for responses returned by the
// Remittance NewToken endpoint.
func EncodeNewTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*remittanceviews.TokenPost200ApplicationJSONResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewNewTokenResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeNewTokenRequest returns a decoder for requests sent to the Remittance
// NewToken endpoint.
func DecodeNewTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body string
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := body

		return payload, nil
	}
}

// EncodeNewTokenError returns an encoder for errors returned by the NewToken
// Remittance endpoint.
func EncodeNewTokenError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewNewTokenInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "unauthorized":
			res := v.(*remittance.TokenPost401ApplicationJSONResponse)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewNewTokenUnauthorizedResponseBody(res)
			}
			w.Header().Set("goa-error", "unauthorized")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetBalanceResponse returns an encoder for responses returned by the
// Remittance GetBalance endpoint.
func EncodeGetBalanceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*remittanceviews.Balance)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewGetBalanceResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetBalanceRequest returns a decoder for requests sent to the
// Remittance GetBalance endpoint.
func DecodeGetBalanceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body string
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := body

		return payload, nil
	}
}

// EncodeGetBalanceError returns an encoder for errors returned by the
// GetBalance Remittance endpoint.
func EncodeGetBalanceError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetBalanceBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetBalanceInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeRetrieveAccountHolderResponse returns an encoder for responses
// returned by the Remittance RetrieveAccountHolder endpoint.
func EncodeRetrieveAccountHolderResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRetrieveAccountHolderRequest returns a decoder for requests sent to
// the Remittance RetrieveAccountHolder endpoint.
func DecodeRetrieveAccountHolderRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			accountHolderIDType string
			accountHolderID     string

			params = mux.Vars(r)
		)
		accountHolderIDType = params["accountHolderIdType"]
		accountHolderID = params["accountHolderId"]
		payload := NewRetrieveAccountHolderPayload(accountHolderIDType, accountHolderID)

		return payload, nil
	}
}

// EncodeRetrieveAccountHolderError returns an encoder for errors returned by
// the RetrieveAccountHolder Remittance endpoint.
func EncodeRetrieveAccountHolderError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRetrieveAccountHolderBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewRetrieveAccountHolderInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeTransferResponse returns an encoder for responses returned by the
// Remittance Transfer endpoint.
func EncodeTransferResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusAccepted)
		return enc.Encode(body)
	}
}

// DecodeTransferRequest returns a decoder for requests sent to the Remittance
// Transfer endpoint.
func DecodeTransferRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TransferRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateTransferRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewTransfer1(&body)

		return payload, nil
	}
}

// EncodeTransferError returns an encoder for errors returned by the Transfer
// Remittance endpoint.
func EncodeTransferError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewTransferBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "conflict":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewTransferConflictResponseBody(res)
			}
			w.Header().Set("goa-error", "conflict")
			w.WriteHeader(http.StatusConflict)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewTransferInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeTransferStatusResponse returns an encoder for responses returned by
// the Remittance TransferStatus endpoint.
func EncodeTransferStatusResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*remittanceviews.TransferResult)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewTransferStatusResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTransferStatusRequest returns a decoder for requests sent to the
// Remittance TransferStatus endpoint.
func DecodeTransferStatusRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			referenceID string

			params = mux.Vars(r)
		)
		referenceID = params["referenceId"]
		payload := NewTransferStatusPayload(referenceID)

		return payload, nil
	}
}

// EncodeTransferStatusError returns an encoder for errors returned by the
// TransferStatus Remittance endpoint.
func EncodeTransferStatusError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewTransferStatusBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "not_found":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewTransferStatusNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", "not_found")
			w.WriteHeader(http.StatusNotFound)
			return enc.Encode(body)
		case "internal_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewTransferStatusInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// unmarshalPartyRequestBodyToRemittanceParty builds a value of type
// *remittance.Party from a value of type *PartyRequestBody.
func unmarshalPartyRequestBodyToRemittanceParty(v *PartyRequestBody) *remittance.Party {
	if v == nil {
		return nil
	}
	res := &remittance.Party{
		PartyIDType: v.PartyIDType,
		PartyID:     v.PartyID,
	}

	return res
}

// marshalRemittanceviewsPartyViewToPartyResponseBody builds a value of type
// *PartyResponseBody from a value of type *remittanceviews.PartyView.
func marshalRemittanceviewsPartyViewToPartyResponseBody(v *remittanceviews.PartyView) *PartyResponseBody {
	if v == nil {
		return nil
	}
	res := &PartyResponseBody{
		PartyIDType: v.PartyIDType,
		PartyID:     v.PartyID,
	}

	return res
}

// marshalRemittanceviewsErrorReasonViewToErrorReasonResponseBody builds a
// value of type *ErrorReasonResponseBody from a value of type
// *remittanceviews.ErrorReasonView.
func marshalRemittanceviewsErrorReasonViewToErrorReasonResponseBody(v *remittanceviews.ErrorReasonView) *ErrorReasonResponseBody {
	if v == nil {
		return nil
	}
	res := &ErrorReasonResponseBody{
		Code:    v.Code,
		Message: v.Message,
	}

	return res
}
