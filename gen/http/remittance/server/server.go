// Code generated by goa v3.1.3, DO NOT EDIT.
//
// Remittance HTTP server
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package server

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	remittance "github.com/wondenge/momo-go/gen/remittance"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the Remittance service endpoint HTTP handlers.
type Server struct {
	Mounts                []*MountPoint
	NewToken              http.Handler
	GetBalance            http.Handler
	RetrieveAccountHolder http.Handler
	Transfer              http.Handler
	TransferStatus        http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the Remittance service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *remittance.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"NewToken", "POST", "/remittance/token"},
			{"GetBalance", "GET", "/remittance/v1_0/account/balance"},
			{"RetrieveAccountHolder", "GET", "/remittance/v1_0/accountholder/{accountHolderIdType}/{accountHolderId}/active"},
			{"Transfer", "POST", "/remittance/v1_0/transfer"},
			{"TransferStatus", "GET", "/remittance/v1_0/transfer/{referenceId}"},
		},
		NewToken:              NewNewTokenHandler(e.NewToken, mux, decoder, encoder, errhandler, formatter),
		GetBalance:            NewGetBalanceHandler(e.GetBalance, mux, decoder, encoder, errhandler, formatter),
		RetrieveAccountHolder: NewRetrieveAccountHolderHandler(e.RetrieveAccountHolder, mux, decoder, encoder, errhandler, formatter),
		Transfer:              NewTransferHandler(e.Transfer, mux, decoder, encoder, errhandler, formatter),
		TransferStatus:        NewTransferStatusHandler(e.TransferStatus, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "Remittance" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.NewToken = m(s.NewToken)
	s.GetBalance = m(s.GetBalance)
	s.RetrieveAccountHolder = m(s.RetrieveAccountHolder)
	s.Transfer = m(s.Transfer)
	s.TransferStatus = m(s.TransferStatus)
}

// Mount configures the mux to serve the Remittance endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountNewTokenHandler(mux, h.NewToken)
	MountGetBalanceHandler(mux, h.GetBalance)
	MountRetrieveAccountHolderHandler(mux, h.RetrieveAccountHolder)
	MountTransferHandler(mux, h.Transfer)
	MountTransferStatusHandler(mux, h.TransferStatus)
}

// MountNewTokenHandler configures the mux to serve the "Remittance" service
// "NewToken" endpoint.
func MountNewTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/remittance/token", f)
}

// NewNewTokenHandler creates a HTTP handler which loads the HTTP request and
// calls the "Remittance" service "NewToken" endpoint.
func NewNewTokenHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeNewTokenRequest(mux, decoder)
		encodeResponse = EncodeNewTokenResponse(encoder)
		encodeError    = EncodeNewTokenError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "NewToken")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Remittance")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetBalanceHandler configures the mux to serve the "Remittance" service
// "GetBalance" endpoint.
func MountGetBalanceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/remittance/v1_0/account/balance", f)
}

// NewGetBalanceHandler creates a HTTP handler which loads the HTTP request and
// calls the "Remittance" service "GetBalance" endpoint.
func NewGetBalanceHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetBalanceRequest(mux, decoder)
		encodeResponse = EncodeGetBalanceResponse(encoder)
		encodeError    = EncodeGetBalanceError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetBalance")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Remittance")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRetrieveAccountHolderHandler configures the mux to serve the
// "Remittance" service "RetrieveAccountHolder" endpoint.
func MountRetrieveAccountHolderHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/remittance/v1_0/accountholder/{accountHolderIdType}/{accountHolderId}/active", f)
}

// NewRetrieveAccountHolderHandler creates a HTTP handler which loads the HTTP
// request and calls the "Remittance" service "RetrieveAccountHolder" endpoint.
func NewRetrieveAccountHolderHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRetrieveAccountHolderRequest(mux, decoder)
		encodeResponse = EncodeRetrieveAccountHolderResponse(encoder)
		encodeError    = EncodeRetrieveAccountHolderError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "RetrieveAccountHolder")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Remittance")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTransferHandler configures the mux to serve the "Remittance" service
// "Transfer" endpoint.
func MountTransferHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/remittance/v1_0/transfer", f)
}

// NewTransferHandler creates a HTTP handler which loads the HTTP request and
// calls the "Remittance" service "Transfer" endpoint.
func NewTransferHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTransferRequest(mux, decoder)
		encodeResponse = EncodeTransferResponse(encoder)
		encodeError    = EncodeTransferError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Transfer")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Remittance")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTransferStatusHandler configures the mux to serve the "Remittance"
// service "TransferStatus" endpoint.
func MountTransferStatusHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/remittance/v1_0/transfer/{referenceId}", f)
}

// NewTransferStatusHandler creates a HTTP handler which loads the HTTP request
// and calls the "Remittance" service "TransferStatus" endpoint.
func NewTransferStatusHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTransferStatusRequest(mux, decoder)
		encodeResponse = EncodeTransferStatusResponse(encoder)
		encodeError    = EncodeTransferStatusError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "TransferStatus")
		ctx = context.WithValue(ctx, goa.ServiceKey, "Remittance")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
