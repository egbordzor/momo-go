// Code generated by goa v3.1.3, DO NOT EDIT.
//
// User HTTP client types
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package client

import (
	user "github.com/wondenge/momo-go/gen/user"
	userviews "github.com/wondenge/momo-go/gen/user/views"
	goa "goa.design/goa/v3/pkg"
)

// NewUserRequestBody is the type of the "User" service "NewUser" endpoint HTTP
// request body.
type NewUserRequestBody struct {
	// The provider callback host
	ProviderCallbackHost *string `form:"providerCallbackHost,omitempty" json:"providerCallbackHost,omitempty" xml:"providerCallbackHost,omitempty"`
}

// NewKeyRequestBody is the type of the "User" service "NewKey" endpoint HTTP
// request body.
type NewKeyRequestBody struct {
	// Format - UUID.
	XReferenceID string `form:"X-Reference-Id" json:"X-Reference-Id" xml:"X-Reference-Id"`
}

// GetUserRequestBody is the type of the "User" service "GetUser" endpoint HTTP
// request body.
type GetUserRequestBody struct {
	// Format - UUID.
	XReferenceID string `form:"X-Reference-Id" json:"X-Reference-Id" xml:"X-Reference-Id"`
}

// NewKeyResponseBody is the type of the "User" service "NewKey" endpoint HTTP
// response body.
type NewKeyResponseBody struct {
	// The created API user key
	APIKey *string `form:"apiKey,omitempty" json:"apiKey,omitempty" xml:"apiKey,omitempty"`
}

// GetUserDetailsResponseBody is the type of the "User" service
// "GetUserDetails" endpoint HTTP response body.
type GetUserDetailsResponseBody struct {
	// The provider callback host
	ProviderCallbackHost *string                        `form:"providerCallbackHost,omitempty" json:"providerCallbackHost,omitempty" xml:"providerCallbackHost,omitempty"`
	PaymentServerURL     *PaymentServerURLResponseBody  `form:"paymentServerUrl,omitempty" json:"paymentServerUrl,omitempty" xml:"paymentServerUrl,omitempty"`
	TargetEnvironment    *TargetEnvironmentResponseBody `form:"targetEnvironment,omitempty" json:"targetEnvironment,omitempty" xml:"targetEnvironment,omitempty"`
}

// NewUserBadRequestResponseBody is the type of the "User" service "NewUser"
// endpoint HTTP response body for the "bad_request" error.
type NewUserBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewUserInternalErrorResponseBody is the type of the "User" service "NewUser"
// endpoint HTTP response body for the "internal_error" error.
type NewUserInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewUserConflictResponseBody is the type of the "User" service "NewUser"
// endpoint HTTP response body for the "conflict" error.
type NewUserConflictResponseBody struct {
	// Code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// NewKeyBadRequestResponseBody is the type of the "User" service "NewKey"
// endpoint HTTP response body for the "bad_request" error.
type NewKeyBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewKeyInternalErrorResponseBody is the type of the "User" service "NewKey"
// endpoint HTTP response body for the "internal_error" error.
type NewKeyInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewKeyNotFoundResponseBody is the type of the "User" service "NewKey"
// endpoint HTTP response body for the "not_found" error.
type NewKeyNotFoundResponseBody struct {
	// Code
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetUserBadRequestResponseBody is the type of the "User" service "GetUser"
// endpoint HTTP response body for the "bad_request" error.
type GetUserBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserNotFoundResponseBody is the type of the "User" service "GetUser"
// endpoint HTTP response body for the "not_found" error.
type GetUserNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserInternalErrorResponseBody is the type of the "User" service "GetUser"
// endpoint HTTP response body for the "internal_error" error.
type GetUserInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserDetailsBadRequestResponseBody is the type of the "User" service
// "GetUserDetails" endpoint HTTP response body for the "bad_request" error.
type GetUserDetailsBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetUserDetailsInternalErrorResponseBody is the type of the "User" service
// "GetUserDetails" endpoint HTTP response body for the "internal_error" error.
type GetUserDetailsInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// PaymentServerURLResponseBody is used to define fields on response body types.
type PaymentServerURLResponseBody struct {
	// The payment server URL
	APIKey *string `form:"apiKey,omitempty" json:"apiKey,omitempty" xml:"apiKey,omitempty"`
}

// TargetEnvironmentResponseBody is used to define fields on response body
// types.
type TargetEnvironmentResponseBody struct {
	// The target environment
	APIKey *string `form:"apiKey,omitempty" json:"apiKey,omitempty" xml:"apiKey,omitempty"`
}

// NewNewUserRequestBody builds the HTTP request body from the payload of the
// "NewUser" endpoint of the "User" service.
func NewNewUserRequestBody(p *user.APIUser) *NewUserRequestBody {
	body := &NewUserRequestBody{
		ProviderCallbackHost: p.ProviderCallbackHost,
	}
	return body
}

// NewNewKeyRequestBody builds the HTTP request body from the payload of the
// "NewKey" endpoint of the "User" service.
func NewNewKeyRequestBody(p *user.NewKeyPayload) *NewKeyRequestBody {
	body := &NewKeyRequestBody{
		XReferenceID: p.XReferenceID,
	}
	return body
}

// NewGetUserRequestBody builds the HTTP request body from the payload of the
// "GetUser" endpoint of the "User" service.
func NewGetUserRequestBody(p *user.GetUserPayload) *GetUserRequestBody {
	body := &GetUserRequestBody{
		XReferenceID: p.XReferenceID,
	}
	return body
}

// NewNewUserBadRequest builds a User service NewUser endpoint bad_request
// error.
func NewNewUserBadRequest(body *NewUserBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewNewUserInternalError builds a User service NewUser endpoint
// internal_error error.
func NewNewUserInternalError(body *NewUserInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewNewUserConflict builds a User service NewUser endpoint conflict error.
func NewNewUserConflict(body *NewUserConflictResponseBody) *user.ErrorReason {
	v := &user.ErrorReason{
		Code:    body.Code,
		Message: body.Message,
	}

	return v
}

// NewNewKeyAPIUserKeyResultCreated builds a "User" service "NewKey" endpoint
// result from a HTTP "Created" response.
func NewNewKeyAPIUserKeyResultCreated(body *NewKeyResponseBody) *user.APIUserKeyResult {
	v := &user.APIUserKeyResult{
		APIKey: body.APIKey,
	}

	return v
}

// NewNewKeyBadRequest builds a User service NewKey endpoint bad_request error.
func NewNewKeyBadRequest(body *NewKeyBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewNewKeyInternalError builds a User service NewKey endpoint internal_error
// error.
func NewNewKeyInternalError(body *NewKeyInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewNewKeyNotFound builds a User service NewKey endpoint not_found error.
func NewNewKeyNotFound(body *NewKeyNotFoundResponseBody) *user.ErrorReason {
	v := &user.ErrorReason{
		Code:    body.Code,
		Message: body.Message,
	}

	return v
}

// NewGetUserBadRequest builds a User service GetUser endpoint bad_request
// error.
func NewGetUserBadRequest(body *GetUserBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserNotFound builds a User service GetUser endpoint not_found error.
func NewGetUserNotFound(body *GetUserNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserInternalError builds a User service GetUser endpoint
// internal_error error.
func NewGetUserInternalError(body *GetUserInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserDetailsAPIUserResultOK builds a "User" service "GetUserDetails"
// endpoint result from a HTTP "OK" response.
func NewGetUserDetailsAPIUserResultOK(body *GetUserDetailsResponseBody) *userviews.APIUserResultView {
	v := &userviews.APIUserResultView{
		ProviderCallbackHost: body.ProviderCallbackHost,
	}
	if body.PaymentServerURL != nil {
		v.PaymentServerURL = unmarshalPaymentServerURLResponseBodyToUserviewsPaymentServerURLView(body.PaymentServerURL)
	}
	if body.TargetEnvironment != nil {
		v.TargetEnvironment = unmarshalTargetEnvironmentResponseBodyToUserviewsTargetEnvironmentView(body.TargetEnvironment)
	}

	return v
}

// NewGetUserDetailsBadRequest builds a User service GetUserDetails endpoint
// bad_request error.
func NewGetUserDetailsBadRequest(body *GetUserDetailsBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetUserDetailsInternalError builds a User service GetUserDetails endpoint
// internal_error error.
func NewGetUserDetailsInternalError(body *GetUserDetailsInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateNewUserBadRequestResponseBody runs the validations defined on
// NewUser_bad_request_Response_Body
func ValidateNewUserBadRequestResponseBody(body *NewUserBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateNewUserInternalErrorResponseBody runs the validations defined on
// NewUser_internal_error_Response_Body
func ValidateNewUserInternalErrorResponseBody(body *NewUserInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateNewUserConflictResponseBody runs the validations defined on
// NewUser_conflict_Response_Body
func ValidateNewUserConflictResponseBody(body *NewUserConflictResponseBody) (err error) {
	if body.Code != nil {
		if !(*body.Code == "PAYEE_NOT_FOUND" || *body.Code == "PAYER_NOT_FOUND" || *body.Code == "NOT_ALLOWED" || *body.Code == "NOT_ALLOWED_TARGET_ENVIRONMENT" || *body.Code == "INVALID_CALLBACK_URL_HOST" || *body.Code == "INVALID_CURRENCY" || *body.Code == "SERVICE_UNAVAILABLE" || *body.Code == "INTERNAL_PROCESSING_ERROR" || *body.Code == "NOT_ENOUGH_FUNDS" || *body.Code == "PAYER_LIMIT_REACHED" || *body.Code == "PAYEE_NOT_ALLOWED_TO_RECEIVE" || *body.Code == "PAYMENT_NOT_APPROVED" || *body.Code == "RESOURCE_NOT_FOUND" || *body.Code == "APPROVAL_REJECTED" || *body.Code == "EXPIRED" || *body.Code == "TRANSACTION_CANCELED" || *body.Code == "RESOURCE_ALREADY_EXIST") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{"PAYEE_NOT_FOUND", "PAYER_NOT_FOUND", "NOT_ALLOWED", "NOT_ALLOWED_TARGET_ENVIRONMENT", "INVALID_CALLBACK_URL_HOST", "INVALID_CURRENCY", "SERVICE_UNAVAILABLE", "INTERNAL_PROCESSING_ERROR", "NOT_ENOUGH_FUNDS", "PAYER_LIMIT_REACHED", "PAYEE_NOT_ALLOWED_TO_RECEIVE", "PAYMENT_NOT_APPROVED", "RESOURCE_NOT_FOUND", "APPROVAL_REJECTED", "EXPIRED", "TRANSACTION_CANCELED", "RESOURCE_ALREADY_EXIST"}))
		}
	}
	return
}

// ValidateNewKeyBadRequestResponseBody runs the validations defined on
// NewKey_bad_request_Response_Body
func ValidateNewKeyBadRequestResponseBody(body *NewKeyBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateNewKeyInternalErrorResponseBody runs the validations defined on
// NewKey_internal_error_Response_Body
func ValidateNewKeyInternalErrorResponseBody(body *NewKeyInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateNewKeyNotFoundResponseBody runs the validations defined on
// NewKey_not_found_Response_Body
func ValidateNewKeyNotFoundResponseBody(body *NewKeyNotFoundResponseBody) (err error) {
	if body.Code != nil {
		if !(*body.Code == "PAYEE_NOT_FOUND" || *body.Code == "PAYER_NOT_FOUND" || *body.Code == "NOT_ALLOWED" || *body.Code == "NOT_ALLOWED_TARGET_ENVIRONMENT" || *body.Code == "INVALID_CALLBACK_URL_HOST" || *body.Code == "INVALID_CURRENCY" || *body.Code == "SERVICE_UNAVAILABLE" || *body.Code == "INTERNAL_PROCESSING_ERROR" || *body.Code == "NOT_ENOUGH_FUNDS" || *body.Code == "PAYER_LIMIT_REACHED" || *body.Code == "PAYEE_NOT_ALLOWED_TO_RECEIVE" || *body.Code == "PAYMENT_NOT_APPROVED" || *body.Code == "RESOURCE_NOT_FOUND" || *body.Code == "APPROVAL_REJECTED" || *body.Code == "EXPIRED" || *body.Code == "TRANSACTION_CANCELED" || *body.Code == "RESOURCE_ALREADY_EXIST") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.code", *body.Code, []interface{}{"PAYEE_NOT_FOUND", "PAYER_NOT_FOUND", "NOT_ALLOWED", "NOT_ALLOWED_TARGET_ENVIRONMENT", "INVALID_CALLBACK_URL_HOST", "INVALID_CURRENCY", "SERVICE_UNAVAILABLE", "INTERNAL_PROCESSING_ERROR", "NOT_ENOUGH_FUNDS", "PAYER_LIMIT_REACHED", "PAYEE_NOT_ALLOWED_TO_RECEIVE", "PAYMENT_NOT_APPROVED", "RESOURCE_NOT_FOUND", "APPROVAL_REJECTED", "EXPIRED", "TRANSACTION_CANCELED", "RESOURCE_ALREADY_EXIST"}))
		}
	}
	return
}

// ValidateGetUserBadRequestResponseBody runs the validations defined on
// GetUser_bad_request_Response_Body
func ValidateGetUserBadRequestResponseBody(body *GetUserBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserNotFoundResponseBody runs the validations defined on
// GetUser_not_found_Response_Body
func ValidateGetUserNotFoundResponseBody(body *GetUserNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserInternalErrorResponseBody runs the validations defined on
// GetUser_internal_error_Response_Body
func ValidateGetUserInternalErrorResponseBody(body *GetUserInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserDetailsBadRequestResponseBody runs the validations defined on
// GetUserDetails_bad_request_Response_Body
func ValidateGetUserDetailsBadRequestResponseBody(body *GetUserDetailsBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetUserDetailsInternalErrorResponseBody runs the validations defined
// on GetUserDetails_internal_error_Response_Body
func ValidateGetUserDetailsInternalErrorResponseBody(body *GetUserDetailsInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
