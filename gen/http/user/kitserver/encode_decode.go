// Code generated by goa v3.1.3, DO NOT EDIT.
//
// user go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package server

import (
	"context"
	"net/http"

	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/wondenge/momo-go/gen/http/user/server"
	goahttp "goa.design/goa/v3/http"
)

// EncodeNewUserResponse returns a go-kit EncodeResponseFunc suitable for
// encoding user NewUser responses.
func EncodeNewUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeNewUserResponse(encoder)
}

// DecodeNewUserRequest returns a go-kit DecodeRequestFunc suitable for
// decoding user NewUser requests.
func DecodeNewUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeNewUserRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeNewUserError returns a go-kit EncodeResponseFunc suitable for encoding
// errors returned by the user NewUser endpoint.
func EncodeNewUserError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeNewUserError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeNewKeyResponse returns a go-kit EncodeResponseFunc suitable for
// encoding user NewKey responses.
func EncodeNewKeyResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeNewKeyResponse(encoder)
}

// DecodeNewKeyRequest returns a go-kit DecodeRequestFunc suitable for decoding
// user NewKey requests.
func DecodeNewKeyRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeNewKeyRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeNewKeyError returns a go-kit EncodeResponseFunc suitable for encoding
// errors returned by the user NewKey endpoint.
func EncodeNewKeyError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeNewKeyError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeGetUserResponse returns a go-kit EncodeResponseFunc suitable for
// encoding user GetUser responses.
func EncodeGetUserResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeGetUserResponse(encoder)
}

// DecodeGetUserRequest returns a go-kit DecodeRequestFunc suitable for
// decoding user GetUser requests.
func DecodeGetUserRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeGetUserRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeGetUserError returns a go-kit EncodeResponseFunc suitable for encoding
// errors returned by the user GetUser endpoint.
func EncodeGetUserError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeGetUserError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeGetUserDetailsResponse returns a go-kit EncodeResponseFunc suitable
// for encoding user GetUserDetails responses.
func EncodeGetUserDetailsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeGetUserDetailsResponse(encoder)
}

// DecodeGetUserDetailsRequest returns a go-kit DecodeRequestFunc suitable for
// decoding user GetUserDetails requests.
func DecodeGetUserDetailsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeGetUserDetailsRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeGetUserDetailsError returns a go-kit EncodeResponseFunc suitable for
// encoding errors returned by the user GetUserDetails endpoint.
func EncodeGetUserDetailsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeGetUserDetailsError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}
