// Code generated by goa v3.1.3, DO NOT EDIT.
//
// momosvr HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/go-kit/kit/endpoint"
	collectionc "github.com/wondenge/momo-go/gen/http/collection/client"
	disbursementc "github.com/wondenge/momo-go/gen/http/disbursement/client"
	remittancec "github.com/wondenge/momo-go/gen/http/remittance/client"
	userc "github.com/wondenge/momo-go/gen/http/user/client"
	goahttp "goa.design/goa/v3/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `collection (new-token|get-balance|retrieve-account-holder|payment-request|payment-status)
disbursement (new-token|get-balance|retrieve-account-holder|transfer|transfer-status)
remittance (new-token|get-balance|retrieve-account-holder|transfer|transfer-status)
user (new-user|new-key|get-user|get-user-details)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` collection new-token --p "Magnam iusto nam aliquid qui."` + "\n" +
		os.Args[0] + ` disbursement new-token --p "Libero reiciendis voluptate."` + "\n" +
		os.Args[0] + ` remittance new-token --p "Enim delectus qui tempore."` + "\n" +
		os.Args[0] + ` user new-user --body '{
      "providerCallbackHost": "Sunt quia nostrum corrupti."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (endpoint.Endpoint, interface{}, error) {
	var (
		collectionFlags = flag.NewFlagSet("collection", flag.ContinueOnError)

		collectionNewTokenFlags = flag.NewFlagSet("new-token", flag.ExitOnError)
		collectionNewTokenPFlag = collectionNewTokenFlags.String("p", "REQUIRED", "string is the payload type of the Collection service NewToken method.")

		collectionGetBalanceFlags = flag.NewFlagSet("get-balance", flag.ExitOnError)
		collectionGetBalancePFlag = collectionGetBalanceFlags.String("p", "REQUIRED", "string is the payload type of the Collection service GetBalance method.")

		collectionRetrieveAccountHolderFlags                   = flag.NewFlagSet("retrieve-account-holder", flag.ExitOnError)
		collectionRetrieveAccountHolderAccountHolderIDTypeFlag = collectionRetrieveAccountHolderFlags.String("account-holder-id-type", "REQUIRED", "Specifies the type of the party ID")
		collectionRetrieveAccountHolderAccountHolderIDFlag     = collectionRetrieveAccountHolderFlags.String("account-holder-id", "REQUIRED", "The party number.")

		collectionPaymentRequestFlags    = flag.NewFlagSet("payment-request", flag.ExitOnError)
		collectionPaymentRequestBodyFlag = collectionPaymentRequestFlags.String("body", "REQUIRED", "")

		collectionPaymentStatusFlags           = flag.NewFlagSet("payment-status", flag.ExitOnError)
		collectionPaymentStatusReferenceIDFlag = collectionPaymentStatusFlags.String("reference-id", "REQUIRED", " UUID of transaction to get result")

		disbursementFlags = flag.NewFlagSet("disbursement", flag.ContinueOnError)

		disbursementNewTokenFlags = flag.NewFlagSet("new-token", flag.ExitOnError)
		disbursementNewTokenPFlag = disbursementNewTokenFlags.String("p", "REQUIRED", "string is the payload type of the Disbursement service NewToken method.")

		disbursementGetBalanceFlags = flag.NewFlagSet("get-balance", flag.ExitOnError)
		disbursementGetBalancePFlag = disbursementGetBalanceFlags.String("p", "REQUIRED", "string is the payload type of the Disbursement service GetBalance method.")

		disbursementRetrieveAccountHolderFlags                   = flag.NewFlagSet("retrieve-account-holder", flag.ExitOnError)
		disbursementRetrieveAccountHolderAccountHolderIDTypeFlag = disbursementRetrieveAccountHolderFlags.String("account-holder-id-type", "REQUIRED", "Specifies the type of the party ID")
		disbursementRetrieveAccountHolderAccountHolderIDFlag     = disbursementRetrieveAccountHolderFlags.String("account-holder-id", "REQUIRED", "The party number.")

		disbursementTransferFlags    = flag.NewFlagSet("transfer", flag.ExitOnError)
		disbursementTransferBodyFlag = disbursementTransferFlags.String("body", "REQUIRED", "")

		disbursementTransferStatusFlags           = flag.NewFlagSet("transfer-status", flag.ExitOnError)
		disbursementTransferStatusReferenceIDFlag = disbursementTransferStatusFlags.String("reference-id", "REQUIRED", " UUID of transaction to get result")

		remittanceFlags = flag.NewFlagSet("remittance", flag.ContinueOnError)

		remittanceNewTokenFlags = flag.NewFlagSet("new-token", flag.ExitOnError)
		remittanceNewTokenPFlag = remittanceNewTokenFlags.String("p", "REQUIRED", "string is the payload type of the Remittance service NewToken method.")

		remittanceGetBalanceFlags = flag.NewFlagSet("get-balance", flag.ExitOnError)
		remittanceGetBalancePFlag = remittanceGetBalanceFlags.String("p", "REQUIRED", "string is the payload type of the Remittance service GetBalance method.")

		remittanceRetrieveAccountHolderFlags                   = flag.NewFlagSet("retrieve-account-holder", flag.ExitOnError)
		remittanceRetrieveAccountHolderAccountHolderIDTypeFlag = remittanceRetrieveAccountHolderFlags.String("account-holder-id-type", "REQUIRED", "Specifies the type of the party ID")
		remittanceRetrieveAccountHolderAccountHolderIDFlag     = remittanceRetrieveAccountHolderFlags.String("account-holder-id", "REQUIRED", "The party number.")

		remittanceTransferFlags    = flag.NewFlagSet("transfer", flag.ExitOnError)
		remittanceTransferBodyFlag = remittanceTransferFlags.String("body", "REQUIRED", "")

		remittanceTransferStatusFlags           = flag.NewFlagSet("transfer-status", flag.ExitOnError)
		remittanceTransferStatusReferenceIDFlag = remittanceTransferStatusFlags.String("reference-id", "REQUIRED", " UUID of transaction to get result")

		userFlags = flag.NewFlagSet("user", flag.ContinueOnError)

		userNewUserFlags    = flag.NewFlagSet("new-user", flag.ExitOnError)
		userNewUserBodyFlag = userNewUserFlags.String("body", "REQUIRED", "")

		userNewKeyFlags    = flag.NewFlagSet("new-key", flag.ExitOnError)
		userNewKeyBodyFlag = userNewKeyFlags.String("body", "REQUIRED", "")

		userGetUserFlags    = flag.NewFlagSet("get-user", flag.ExitOnError)
		userGetUserBodyFlag = userGetUserFlags.String("body", "REQUIRED", "")

		userGetUserDetailsFlags = flag.NewFlagSet("get-user-details", flag.ExitOnError)
		userGetUserDetailsPFlag = userGetUserDetailsFlags.String("p", "REQUIRED", "string is the payload type of the User service GetUserDetails method.")
	)
	collectionFlags.Usage = collectionUsage
	collectionNewTokenFlags.Usage = collectionNewTokenUsage
	collectionGetBalanceFlags.Usage = collectionGetBalanceUsage
	collectionRetrieveAccountHolderFlags.Usage = collectionRetrieveAccountHolderUsage
	collectionPaymentRequestFlags.Usage = collectionPaymentRequestUsage
	collectionPaymentStatusFlags.Usage = collectionPaymentStatusUsage

	disbursementFlags.Usage = disbursementUsage
	disbursementNewTokenFlags.Usage = disbursementNewTokenUsage
	disbursementGetBalanceFlags.Usage = disbursementGetBalanceUsage
	disbursementRetrieveAccountHolderFlags.Usage = disbursementRetrieveAccountHolderUsage
	disbursementTransferFlags.Usage = disbursementTransferUsage
	disbursementTransferStatusFlags.Usage = disbursementTransferStatusUsage

	remittanceFlags.Usage = remittanceUsage
	remittanceNewTokenFlags.Usage = remittanceNewTokenUsage
	remittanceGetBalanceFlags.Usage = remittanceGetBalanceUsage
	remittanceRetrieveAccountHolderFlags.Usage = remittanceRetrieveAccountHolderUsage
	remittanceTransferFlags.Usage = remittanceTransferUsage
	remittanceTransferStatusFlags.Usage = remittanceTransferStatusUsage

	userFlags.Usage = userUsage
	userNewUserFlags.Usage = userNewUserUsage
	userNewKeyFlags.Usage = userNewKeyUsage
	userGetUserFlags.Usage = userGetUserUsage
	userGetUserDetailsFlags.Usage = userGetUserDetailsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "collection":
			svcf = collectionFlags
		case "disbursement":
			svcf = disbursementFlags
		case "remittance":
			svcf = remittanceFlags
		case "user":
			svcf = userFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "collection":
			switch epn {
			case "new-token":
				epf = collectionNewTokenFlags

			case "get-balance":
				epf = collectionGetBalanceFlags

			case "retrieve-account-holder":
				epf = collectionRetrieveAccountHolderFlags

			case "payment-request":
				epf = collectionPaymentRequestFlags

			case "payment-status":
				epf = collectionPaymentStatusFlags

			}

		case "disbursement":
			switch epn {
			case "new-token":
				epf = disbursementNewTokenFlags

			case "get-balance":
				epf = disbursementGetBalanceFlags

			case "retrieve-account-holder":
				epf = disbursementRetrieveAccountHolderFlags

			case "transfer":
				epf = disbursementTransferFlags

			case "transfer-status":
				epf = disbursementTransferStatusFlags

			}

		case "remittance":
			switch epn {
			case "new-token":
				epf = remittanceNewTokenFlags

			case "get-balance":
				epf = remittanceGetBalanceFlags

			case "retrieve-account-holder":
				epf = remittanceRetrieveAccountHolderFlags

			case "transfer":
				epf = remittanceTransferFlags

			case "transfer-status":
				epf = remittanceTransferStatusFlags

			}

		case "user":
			switch epn {
			case "new-user":
				epf = userNewUserFlags

			case "new-key":
				epf = userNewKeyFlags

			case "get-user":
				epf = userGetUserFlags

			case "get-user-details":
				epf = userGetUserDetailsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint endpoint.Endpoint
		err      error
	)
	{
		switch svcn {
		case "collection":
			c := collectionc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "new-token":
				endpoint = c.NewToken()
				data = *collectionNewTokenPFlag
			case "get-balance":
				endpoint = c.GetBalance()
				data = *collectionGetBalancePFlag
			case "retrieve-account-holder":
				endpoint = c.RetrieveAccountHolder()
				data, err = collectionc.BuildRetrieveAccountHolderPayload(*collectionRetrieveAccountHolderAccountHolderIDTypeFlag, *collectionRetrieveAccountHolderAccountHolderIDFlag)
			case "payment-request":
				endpoint = c.PaymentRequest()
				data, err = collectionc.BuildPaymentRequestPayload(*collectionPaymentRequestBodyFlag)
			case "payment-status":
				endpoint = c.PaymentStatus()
				data, err = collectionc.BuildPaymentStatusPayload(*collectionPaymentStatusReferenceIDFlag)
			}
		case "disbursement":
			c := disbursementc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "new-token":
				endpoint = c.NewToken()
				data = *disbursementNewTokenPFlag
			case "get-balance":
				endpoint = c.GetBalance()
				data = *disbursementGetBalancePFlag
			case "retrieve-account-holder":
				endpoint = c.RetrieveAccountHolder()
				data, err = disbursementc.BuildRetrieveAccountHolderPayload(*disbursementRetrieveAccountHolderAccountHolderIDTypeFlag, *disbursementRetrieveAccountHolderAccountHolderIDFlag)
			case "transfer":
				endpoint = c.Transfer()
				data, err = disbursementc.BuildTransferPayload(*disbursementTransferBodyFlag)
			case "transfer-status":
				endpoint = c.TransferStatus()
				data, err = disbursementc.BuildTransferStatusPayload(*disbursementTransferStatusReferenceIDFlag)
			}
		case "remittance":
			c := remittancec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "new-token":
				endpoint = c.NewToken()
				data = *remittanceNewTokenPFlag
			case "get-balance":
				endpoint = c.GetBalance()
				data = *remittanceGetBalancePFlag
			case "retrieve-account-holder":
				endpoint = c.RetrieveAccountHolder()
				data, err = remittancec.BuildRetrieveAccountHolderPayload(*remittanceRetrieveAccountHolderAccountHolderIDTypeFlag, *remittanceRetrieveAccountHolderAccountHolderIDFlag)
			case "transfer":
				endpoint = c.Transfer()
				data, err = remittancec.BuildTransferPayload(*remittanceTransferBodyFlag)
			case "transfer-status":
				endpoint = c.TransferStatus()
				data, err = remittancec.BuildTransferStatusPayload(*remittanceTransferStatusReferenceIDFlag)
			}
		case "user":
			c := userc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "new-user":
				endpoint = c.NewUser()
				data, err = userc.BuildNewUserPayload(*userNewUserBodyFlag)
			case "new-key":
				endpoint = c.NewKey()
				data, err = userc.BuildNewKeyPayload(*userNewKeyBodyFlag)
			case "get-user":
				endpoint = c.GetUser()
				data, err = userc.BuildGetUserPayload(*userGetUserBodyFlag)
			case "get-user-details":
				endpoint = c.GetUserDetails()
				data = *userGetUserDetailsPFlag
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// collectionUsage displays the usage of the collection command and its
// subcommands.
func collectionUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Collection service interface.
Usage:
    %s [globalflags] collection COMMAND [flags]

COMMAND:
    new-token: Creates an Access Token.
    get-balance: Get the balance of the account
    retrieve-account-holder: Checks if an account holder is registered and active in the system
    payment-request: Request a payment from a consumer (Payer).
    payment-status: Get the status of a request to pay.

Additional help:
    %s collection COMMAND --help
`, os.Args[0], os.Args[0])
}
func collectionNewTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection new-token -p STRING

Creates an Access Token.
    -p STRING: string is the payload type of the Collection service NewToken method.

Example:
    `+os.Args[0]+` collection new-token --p "Magnam iusto nam aliquid qui."
`, os.Args[0])
}

func collectionGetBalanceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection get-balance -p STRING

Get the balance of the account
    -p STRING: string is the payload type of the Collection service GetBalance method.

Example:
    `+os.Args[0]+` collection get-balance --p "Unde recusandae labore sunt magni at commodi."
`, os.Args[0])
}

func collectionRetrieveAccountHolderUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection retrieve-account-holder -account-holder-id-type STRING -account-holder-id STRING

Checks if an account holder is registered and active in the system
    -account-holder-id-type STRING: Specifies the type of the party ID
    -account-holder-id STRING: The party number.

Example:
    `+os.Args[0]+` collection retrieve-account-holder --account-holder-id-type "Architecto exercitationem provident non." --account-holder-id "Voluptas molestiae."
`, os.Args[0])
}

func collectionPaymentRequestUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection payment-request -body JSON

Request a payment from a consumer (Payer).
    -body JSON: 

Example:
    `+os.Args[0]+` collection payment-request --body '{
      "amount": "Sunt aliquam pariatur ut magni quisquam.",
      "currency": "Odit explicabo ex et.",
      "externalId": "Et fugit officia.",
      "payeeNote": "Dolorem ea.",
      "payer": {
         "partyId": "Corporis perspiciatis provident quis adipisci harum.",
         "partyIdType": "EMAIL"
      },
      "payerMessage": "Mollitia qui quasi nostrum."
   }'
`, os.Args[0])
}

func collectionPaymentStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] collection payment-status -reference-id STRING

Get the status of a request to pay.
    -reference-id STRING:  UUID of transaction to get result

Example:
    `+os.Args[0]+` collection payment-status --reference-id "Ut ea porro perspiciatis."
`, os.Args[0])
}

// disbursementUsage displays the usage of the disbursement command and its
// subcommands.
func disbursementUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Disbursement service interface.
Usage:
    %s [globalflags] disbursement COMMAND [flags]

COMMAND:
    new-token: Creates an Access Token.
    get-balance: Get the balance of the account
    retrieve-account-holder: Checks if an account holder is registered and active in the system
    transfer: transfer an amount from the owner’s account to a payee account.
    transfer-status: Get the status of a transfer.

Additional help:
    %s disbursement COMMAND --help
`, os.Args[0], os.Args[0])
}
func disbursementNewTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] disbursement new-token -p STRING

Creates an Access Token.
    -p STRING: string is the payload type of the Disbursement service NewToken method.

Example:
    `+os.Args[0]+` disbursement new-token --p "Libero reiciendis voluptate."
`, os.Args[0])
}

func disbursementGetBalanceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] disbursement get-balance -p STRING

Get the balance of the account
    -p STRING: string is the payload type of the Disbursement service GetBalance method.

Example:
    `+os.Args[0]+` disbursement get-balance --p "Modi accusamus."
`, os.Args[0])
}

func disbursementRetrieveAccountHolderUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] disbursement retrieve-account-holder -account-holder-id-type STRING -account-holder-id STRING

Checks if an account holder is registered and active in the system
    -account-holder-id-type STRING: Specifies the type of the party ID
    -account-holder-id STRING: The party number.

Example:
    `+os.Args[0]+` disbursement retrieve-account-holder --account-holder-id-type "Perferendis sit pariatur neque voluptates." --account-holder-id "Cupiditate similique et."
`, os.Args[0])
}

func disbursementTransferUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] disbursement transfer -body JSON

transfer an amount from the owner’s account to a payee account.
    -body JSON: 

Example:
    `+os.Args[0]+` disbursement transfer --body '{
      "amount": "Quia voluptas tenetur repellendus.",
      "currency": "Iure qui quo voluptatem ducimus.",
      "externalId": "Vel qui libero sunt eos omnis laudantium.",
      "payee": {
         "partyId": "Corporis perspiciatis provident quis adipisci harum.",
         "partyIdType": "EMAIL"
      },
      "payeeNote": "Illo id distinctio.",
      "payerMessage": "Qui est sit dolor sunt."
   }'
`, os.Args[0])
}

func disbursementTransferStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] disbursement transfer-status -reference-id STRING

Get the status of a transfer.
    -reference-id STRING:  UUID of transaction to get result

Example:
    `+os.Args[0]+` disbursement transfer-status --reference-id "Unde dolores hic perspiciatis et quia sint."
`, os.Args[0])
}

// remittanceUsage displays the usage of the remittance command and its
// subcommands.
func remittanceUsage() {
	fmt.Fprintf(os.Stderr, `Service is the Remittance service interface.
Usage:
    %s [globalflags] remittance COMMAND [flags]

COMMAND:
    new-token: Creates an Access Token.
    get-balance: Get the balance of the account
    retrieve-account-holder: Checks if an account holder is registered and active in the system
    transfer: Request a payment from a consumer (Payer).
    transfer-status: Get the status of a request to pay.

Additional help:
    %s remittance COMMAND --help
`, os.Args[0], os.Args[0])
}
func remittanceNewTokenUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] remittance new-token -p STRING

Creates an Access Token.
    -p STRING: string is the payload type of the Remittance service NewToken method.

Example:
    `+os.Args[0]+` remittance new-token --p "Enim delectus qui tempore."
`, os.Args[0])
}

func remittanceGetBalanceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] remittance get-balance -p STRING

Get the balance of the account
    -p STRING: string is the payload type of the Remittance service GetBalance method.

Example:
    `+os.Args[0]+` remittance get-balance --p "Veniam error sequi nihil."
`, os.Args[0])
}

func remittanceRetrieveAccountHolderUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] remittance retrieve-account-holder -account-holder-id-type STRING -account-holder-id STRING

Checks if an account holder is registered and active in the system
    -account-holder-id-type STRING: Specifies the type of the party ID
    -account-holder-id STRING: The party number.

Example:
    `+os.Args[0]+` remittance retrieve-account-holder --account-holder-id-type "Magnam quod ut deleniti amet consectetur." --account-holder-id "Commodi tenetur nihil."
`, os.Args[0])
}

func remittanceTransferUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] remittance transfer -body JSON

Request a payment from a consumer (Payer).
    -body JSON: 

Example:
    `+os.Args[0]+` remittance transfer --body '{
      "amount": "Repudiandae et consectetur at nihil.",
      "currency": "Rerum quis eos dicta est quae ullam.",
      "externalId": "Aspernatur veritatis commodi.",
      "payee": {
         "partyId": "Corporis perspiciatis provident quis adipisci harum.",
         "partyIdType": "EMAIL"
      },
      "payeeNote": "Tenetur aspernatur maiores.",
      "payerMessage": "Eligendi reiciendis non aut voluptatem dolorem aspernatur."
   }'
`, os.Args[0])
}

func remittanceTransferStatusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] remittance transfer-status -reference-id STRING

Get the status of a request to pay.
    -reference-id STRING:  UUID of transaction to get result

Example:
    `+os.Args[0]+` remittance transfer-status --reference-id "Dolorem rem inventore."
`, os.Args[0])
}

// userUsage displays the usage of the user command and its subcommands.
func userUsage() {
	fmt.Fprintf(os.Stderr, `Service is the User service interface.
Usage:
    %s [globalflags] user COMMAND [flags]

COMMAND:
    new-user: Used to create an API user in the sandbox target environment.
    new-key: Used to create an API key for an API user in the sandbox target environment.
    get-user: Used to get API user information.
    get-user-details: GET API User Details

Additional help:
    %s user COMMAND --help
`, os.Args[0], os.Args[0])
}
func userNewUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user new-user -body JSON

Used to create an API user in the sandbox target environment.
    -body JSON: 

Example:
    `+os.Args[0]+` user new-user --body '{
      "providerCallbackHost": "Sunt quia nostrum corrupti."
   }'
`, os.Args[0])
}

func userNewKeyUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user new-key -body JSON

Used to create an API key for an API user in the sandbox target environment.
    -body JSON: 

Example:
    `+os.Args[0]+` user new-key --body '{
      "X-Reference-Id": "Tempore non et vel esse doloribus."
   }'
`, os.Args[0])
}

func userGetUserUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get-user -body JSON

Used to get API user information.
    -body JSON: 

Example:
    `+os.Args[0]+` user get-user --body '{
      "X-Reference-Id": "Dolorum mollitia sit dolorem ducimus."
   }'
`, os.Args[0])
}

func userGetUserDetailsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] user get-user-details -p STRING

GET API User Details
    -p STRING: string is the payload type of the User service GetUserDetails method.

Example:
    `+os.Args[0]+` user get-user-details --p "Et dolores architecto."
`, os.Args[0])
}
