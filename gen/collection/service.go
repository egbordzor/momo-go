// Code generated by goa v3.1.3, DO NOT EDIT.
//
// collection service
//
// Command:
// $ goa gen github.com/wondenge/momo-go/design

package collection

import (
	"context"

	collectionviews "github.com/wondenge/momo-go/gen/collection/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the collection service interface.
type Service interface {
	// Creates an Access Token.
	NewToken(context.Context, string) (res *TokenPost200ApplicationJSONResponse, err error)
	// Get the balance of the account
	GetBalance(context.Context, string) (res *Balance, err error)
	// Checks if an account holder is registered and active in the system
	RetrieveAccountHolder(context.Context, *RetrieveAccountHolderPayload) (res string, err error)
	// Request a payment from a consumer (Payer).
	PaymentRequest(context.Context, *RequestToPay) (res string, err error)
	// Get the status of a request to pay.
	PaymentStatus(context.Context, *PaymentStatusPayload) (res *RequestToPayResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "collection"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"NewToken", "GetBalance", "RetrieveAccountHolder", "PaymentRequest", "PaymentStatus"}

// TokenPost200ApplicationJSONResponse is the result type of the collection
// service NewToken method.
type TokenPost200ApplicationJSONResponse struct {
	// A JWT token which can be used to authorize against the other API end-points.
	AccessToken *string
	// The token type.
	TokenType *string
	// The validity time in seconds of the token.
	ExpiresIn *int32
}

// Balance is the result type of the collection service GetBalance method.
type Balance struct {
	// The available balance of the account
	AvailableBalance *string
	// ISO4217 Currency
	Currency *string
}

// RetrieveAccountHolderPayload is the payload type of the collection service
// RetrieveAccountHolder method.
type RetrieveAccountHolderPayload struct {
	// Specifies the type of the party ID
	AccountHolderIDType string
	// The party number.
	AccountHolderID string
}

// RequestToPay is the payload type of the collection service PaymentRequest
// method.
type RequestToPay struct {
	// Amount that will be debited from the payer account.
	Amount *string
	// ISO4217 Currency
	Currency *string
	// External id is used as a reference to the transaction.
	ExternalID *string
	Payer      *Party
	// Message that will be written in the payer transaction history message field.
	PayerMessage *string
	// Message that will be written in the payee transaction history note field.
	PayeeNote *string
}

// PaymentStatusPayload is the payload type of the collection service
// PaymentStatus method.
type PaymentStatusPayload struct {
	// UUID of transaction to get result
	ReferenceID string
}

// RequestToPayResult is the result type of the collection service
// PaymentStatus method.
type RequestToPayResult struct {
	// Amount that will be debited from the payer account.
	Amount *string
	// ISO4217 Currency
	Currency *string
	// Financial transactionIdd from mobile money manager.
	FinancialTransactionID *string
	// External id provided in the creation of the requestToPay transaction.
	ExternalID *string
	Payer      *Party
	// Message that will be written in the payer transaction history message field.
	PayerMessage *string
	// Message that will be written in the payee transaction history note field.
	PayeeNote *string
	// Status
	Status *string
	Reason *ErrorReason
}

// Party identifies a account holder in the wallet platform.
type Party struct {
	// PartyIdType
	PartyIDType *string
	PartyID     *string
}

// Error Reason
type ErrorReason struct {
	// Code
	Code *string
	// message
	Message *string
}

// Token Post401 Application Json Response
type TokenPost401ApplicationJSONResponse struct {
	// An error code.
	TokenError *string
}

// Error returns an error description.
func (e *TokenPost401ApplicationJSONResponse) Error() string {
	return "Token Post401 Application Json Response"
}

// ErrorName returns "TokenPost401ApplicationJsonResponse".
func (e *TokenPost401ApplicationJSONResponse) ErrorName() string {
	return "unauthorized"
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeConflict builds a goa.ServiceError from an error.
func MakeConflict(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "conflict",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_found",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewTokenPost200ApplicationJSONResponse initializes result type
// TokenPost200ApplicationJSONResponse from viewed result type
// TokenPost200ApplicationJSONResponse.
func NewTokenPost200ApplicationJSONResponse(vres *collectionviews.TokenPost200ApplicationJSONResponse) *TokenPost200ApplicationJSONResponse {
	return newTokenPost200ApplicationJSONResponse(vres.Projected)
}

// NewViewedTokenPost200ApplicationJSONResponse initializes viewed result type
// TokenPost200ApplicationJSONResponse from result type
// TokenPost200ApplicationJSONResponse using the given view.
func NewViewedTokenPost200ApplicationJSONResponse(res *TokenPost200ApplicationJSONResponse, view string) *collectionviews.TokenPost200ApplicationJSONResponse {
	p := newTokenPost200ApplicationJSONResponseView(res)
	return &collectionviews.TokenPost200ApplicationJSONResponse{Projected: p, View: "default"}
}

// NewBalance initializes result type Balance from viewed result type Balance.
func NewBalance(vres *collectionviews.Balance) *Balance {
	return newBalance(vres.Projected)
}

// NewViewedBalance initializes viewed result type Balance from result type
// Balance using the given view.
func NewViewedBalance(res *Balance, view string) *collectionviews.Balance {
	p := newBalanceView(res)
	return &collectionviews.Balance{Projected: p, View: "default"}
}

// NewRequestToPayResult initializes result type RequestToPayResult from viewed
// result type RequestToPayResult.
func NewRequestToPayResult(vres *collectionviews.RequestToPayResult) *RequestToPayResult {
	return newRequestToPayResult(vres.Projected)
}

// NewViewedRequestToPayResult initializes viewed result type
// RequestToPayResult from result type RequestToPayResult using the given view.
func NewViewedRequestToPayResult(res *RequestToPayResult, view string) *collectionviews.RequestToPayResult {
	p := newRequestToPayResultView(res)
	return &collectionviews.RequestToPayResult{Projected: p, View: "default"}
}

// newTokenPost200ApplicationJSONResponse converts projected type
// TokenPost200ApplicationJSONResponse to service type
// TokenPost200ApplicationJSONResponse.
func newTokenPost200ApplicationJSONResponse(vres *collectionviews.TokenPost200ApplicationJSONResponseView) *TokenPost200ApplicationJSONResponse {
	res := &TokenPost200ApplicationJSONResponse{
		AccessToken: vres.AccessToken,
		TokenType:   vres.TokenType,
		ExpiresIn:   vres.ExpiresIn,
	}
	return res
}

// newTokenPost200ApplicationJSONResponseView projects result type
// TokenPost200ApplicationJSONResponse to projected type
// TokenPost200ApplicationJSONResponseView using the "default" view.
func newTokenPost200ApplicationJSONResponseView(res *TokenPost200ApplicationJSONResponse) *collectionviews.TokenPost200ApplicationJSONResponseView {
	vres := &collectionviews.TokenPost200ApplicationJSONResponseView{
		AccessToken: res.AccessToken,
		TokenType:   res.TokenType,
		ExpiresIn:   res.ExpiresIn,
	}
	return vres
}

// newBalance converts projected type Balance to service type Balance.
func newBalance(vres *collectionviews.BalanceView) *Balance {
	res := &Balance{
		AvailableBalance: vres.AvailableBalance,
		Currency:         vres.Currency,
	}
	return res
}

// newBalanceView projects result type Balance to projected type BalanceView
// using the "default" view.
func newBalanceView(res *Balance) *collectionviews.BalanceView {
	vres := &collectionviews.BalanceView{
		AvailableBalance: res.AvailableBalance,
		Currency:         res.Currency,
	}
	return vres
}

// newRequestToPayResult converts projected type RequestToPayResult to service
// type RequestToPayResult.
func newRequestToPayResult(vres *collectionviews.RequestToPayResultView) *RequestToPayResult {
	res := &RequestToPayResult{
		Amount:                 vres.Amount,
		Currency:               vres.Currency,
		FinancialTransactionID: vres.FinancialTransactionID,
		ExternalID:             vres.ExternalID,
		PayerMessage:           vres.PayerMessage,
		PayeeNote:              vres.PayeeNote,
		Status:                 vres.Status,
	}
	if vres.Payer != nil {
		res.Payer = transformCollectionviewsPartyViewToParty(vres.Payer)
	}
	if vres.Reason != nil {
		res.Reason = newErrorReason(vres.Reason)
	}
	return res
}

// newRequestToPayResultView projects result type RequestToPayResult to
// projected type RequestToPayResultView using the "default" view.
func newRequestToPayResultView(res *RequestToPayResult) *collectionviews.RequestToPayResultView {
	vres := &collectionviews.RequestToPayResultView{
		Amount:                 res.Amount,
		Currency:               res.Currency,
		FinancialTransactionID: res.FinancialTransactionID,
		ExternalID:             res.ExternalID,
		PayerMessage:           res.PayerMessage,
		PayeeNote:              res.PayeeNote,
		Status:                 res.Status,
	}
	if res.Payer != nil {
		vres.Payer = transformPartyToCollectionviewsPartyView(res.Payer)
	}
	if res.Reason != nil {
		vres.Reason = newErrorReasonView(res.Reason)
	}
	return vres
}

// newErrorReason converts projected type ErrorReason to service type
// ErrorReason.
func newErrorReason(vres *collectionviews.ErrorReasonView) *ErrorReason {
	res := &ErrorReason{
		Code:    vres.Code,
		Message: vres.Message,
	}
	return res
}

// newErrorReasonView projects result type ErrorReason to projected type
// ErrorReasonView using the "default" view.
func newErrorReasonView(res *ErrorReason) *collectionviews.ErrorReasonView {
	vres := &collectionviews.ErrorReasonView{
		Code:    res.Code,
		Message: res.Message,
	}
	return vres
}

// transformCollectionviewsPartyViewToParty builds a value of type *Party from
// a value of type *collectionviews.PartyView.
func transformCollectionviewsPartyViewToParty(v *collectionviews.PartyView) *Party {
	if v == nil {
		return nil
	}
	res := &Party{
		PartyIDType: v.PartyIDType,
		PartyID:     v.PartyID,
	}

	return res
}

// transformPartyToCollectionviewsPartyView builds a value of type
// *collectionviews.PartyView from a value of type *Party.
func transformPartyToCollectionviewsPartyView(v *Party) *collectionviews.PartyView {
	if v == nil {
		return nil
	}
	res := &collectionviews.PartyView{
		PartyIDType: v.PartyIDType,
		PartyID:     v.PartyID,
	}

	return res
}
