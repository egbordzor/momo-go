// Code generated by goa v3.1.2, DO NOT EDIT.
//
// collection HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/momo-go/collection/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/go-kit/kit/endpoint"
	getbalancec "github.com/wondenge/momo-go/collection/gen/http/getbalance/client"
	requestopayc "github.com/wondenge/momo-go/collection/gen/http/requestopay/client"
	tokenc "github.com/wondenge/momo-go/collection/gen/http/token/client"
	validatec "github.com/wondenge/momo-go/collection/gen/http/validate/client"
	goahttp "goa.design/goa/v3/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `getbalance show
requestopay (create|get)
token create
validate show
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` getbalance show --authorization "Labore corporis qui ipsum." --x-target-environment "Blanditiis et doloribus." --ocp-apim-subscription-key "Soluta dolores voluptatem nulla odio ut."` + "\n" +
		os.Args[0] + ` requestopay create --authorization "Excepturi non suscipit rerum nobis quo necessitatibus." --x-callback-url "Iusto ea numquam voluptas vitae neque." --x-reference-id "Corporis dignissimos." --x-target-environment "Voluptas ipsam iure sunt." --ocp-apim-subscription-key "Cum cumque."` + "\n" +
		os.Args[0] + ` token create --ocp-apim-subscription-key "Rerum consequatur maxime." --api-key "Et odit voluptates esse illo iure." --api-secret "Corrupti magni ut et."` + "\n" +
		os.Args[0] + ` validate show --account-holder-id-type "Corporis error numquam." --account-holder-id "Dolores iure deleniti et nobis aliquam magni." --authorization "Soluta soluta consequatur consequatur sint pariatur reiciendis." --x-target-environment "Numquam fugiat et." --ocp-apim-subscription-key "Ipsum enim."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (endpoint.Endpoint, interface{}, error) {
	var (
		getbalanceFlags = flag.NewFlagSet("getbalance", flag.ContinueOnError)

		getbalanceShowFlags                      = flag.NewFlagSet("show", flag.ExitOnError)
		getbalanceShowAuthorizationFlag          = getbalanceShowFlags.String("authorization", "", "")
		getbalanceShowXTargetEnvironmentFlag     = getbalanceShowFlags.String("x-target-environment", "REQUIRED", "")
		getbalanceShowOcpApimSubscriptionKeyFlag = getbalanceShowFlags.String("ocp-apim-subscription-key", "REQUIRED", "")

		requestopayFlags = flag.NewFlagSet("requestopay", flag.ContinueOnError)

		requestopayCreateFlags                      = flag.NewFlagSet("create", flag.ExitOnError)
		requestopayCreateAuthorizationFlag          = requestopayCreateFlags.String("authorization", "", "")
		requestopayCreateXCallbackURLFlag           = requestopayCreateFlags.String("x-callback-url", "", "")
		requestopayCreateXReferenceIDFlag           = requestopayCreateFlags.String("x-reference-id", "REQUIRED", "")
		requestopayCreateXTargetEnvironmentFlag     = requestopayCreateFlags.String("x-target-environment", "REQUIRED", "")
		requestopayCreateOcpApimSubscriptionKeyFlag = requestopayCreateFlags.String("ocp-apim-subscription-key", "REQUIRED", "")

		requestopayGetFlags                      = flag.NewFlagSet("get", flag.ExitOnError)
		requestopayGetReferenceIDFlag            = requestopayGetFlags.String("reference-id", "REQUIRED", " UUID of transaction to get result")
		requestopayGetAuthorizationFlag          = requestopayGetFlags.String("authorization", "", "")
		requestopayGetXTargetEnvironmentFlag     = requestopayGetFlags.String("x-target-environment", "REQUIRED", "")
		requestopayGetOcpApimSubscriptionKeyFlag = requestopayGetFlags.String("ocp-apim-subscription-key", "REQUIRED", "")

		tokenFlags = flag.NewFlagSet("token", flag.ContinueOnError)

		tokenCreateFlags                      = flag.NewFlagSet("create", flag.ExitOnError)
		tokenCreateOcpApimSubscriptionKeyFlag = tokenCreateFlags.String("ocp-apim-subscription-key", "REQUIRED", "")
		tokenCreateAPIKeyFlag                 = tokenCreateFlags.String("api-key", "REQUIRED", "API Key")
		tokenCreateAPISecretFlag              = tokenCreateFlags.String("api-secret", "REQUIRED", "API Secret")

		validateFlags = flag.NewFlagSet("validate", flag.ContinueOnError)

		validateShowFlags                      = flag.NewFlagSet("show", flag.ExitOnError)
		validateShowAccountHolderIDTypeFlag    = validateShowFlags.String("account-holder-id-type", "REQUIRED", "Specifies the type of the party ID")
		validateShowAccountHolderIDFlag        = validateShowFlags.String("account-holder-id", "REQUIRED", "The party number.")
		validateShowAuthorizationFlag          = validateShowFlags.String("authorization", "", "")
		validateShowXTargetEnvironmentFlag     = validateShowFlags.String("x-target-environment", "REQUIRED", "")
		validateShowOcpApimSubscriptionKeyFlag = validateShowFlags.String("ocp-apim-subscription-key", "REQUIRED", "")
	)
	getbalanceFlags.Usage = getbalanceUsage
	getbalanceShowFlags.Usage = getbalanceShowUsage

	requestopayFlags.Usage = requestopayUsage
	requestopayCreateFlags.Usage = requestopayCreateUsage
	requestopayGetFlags.Usage = requestopayGetUsage

	tokenFlags.Usage = tokenUsage
	tokenCreateFlags.Usage = tokenCreateUsage

	validateFlags.Usage = validateUsage
	validateShowFlags.Usage = validateShowUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "getbalance":
			svcf = getbalanceFlags
		case "requestopay":
			svcf = requestopayFlags
		case "token":
			svcf = tokenFlags
		case "validate":
			svcf = validateFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "getbalance":
			switch epn {
			case "show":
				epf = getbalanceShowFlags

			}

		case "requestopay":
			switch epn {
			case "create":
				epf = requestopayCreateFlags

			case "get":
				epf = requestopayGetFlags

			}

		case "token":
			switch epn {
			case "create":
				epf = tokenCreateFlags

			}

		case "validate":
			switch epn {
			case "show":
				epf = validateShowFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint endpoint.Endpoint
		err      error
	)
	{
		switch svcn {
		case "getbalance":
			c := getbalancec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = getbalancec.BuildShowPayload(*getbalanceShowAuthorizationFlag, *getbalanceShowXTargetEnvironmentFlag, *getbalanceShowOcpApimSubscriptionKeyFlag)
			}
		case "requestopay":
			c := requestopayc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = requestopayc.BuildCreatePayload(*requestopayCreateAuthorizationFlag, *requestopayCreateXCallbackURLFlag, *requestopayCreateXReferenceIDFlag, *requestopayCreateXTargetEnvironmentFlag, *requestopayCreateOcpApimSubscriptionKeyFlag)
			case "get":
				endpoint = c.Get()
				data, err = requestopayc.BuildGetPayload(*requestopayGetReferenceIDFlag, *requestopayGetAuthorizationFlag, *requestopayGetXTargetEnvironmentFlag, *requestopayGetOcpApimSubscriptionKeyFlag)
			}
		case "token":
			c := tokenc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = tokenc.BuildCreatePayload(*tokenCreateOcpApimSubscriptionKeyFlag, *tokenCreateAPIKeyFlag, *tokenCreateAPISecretFlag)
			}
		case "validate":
			c := validatec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "show":
				endpoint = c.Show()
				data, err = validatec.BuildShowPayload(*validateShowAccountHolderIDTypeFlag, *validateShowAccountHolderIDFlag, *validateShowAuthorizationFlag, *validateShowXTargetEnvironmentFlag, *validateShowOcpApimSubscriptionKeyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// getbalanceUsage displays the usage of the getbalance command and its
// subcommands.
func getbalanceUsage() {
	fmt.Fprintf(os.Stderr, `Service is the getbalance service interface.
Usage:
    %s [globalflags] getbalance COMMAND [flags]

COMMAND:
    show: Get the balance of the account

Additional help:
    %s getbalance COMMAND --help
`, os.Args[0], os.Args[0])
}
func getbalanceShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] getbalance show -authorization STRING -x-target-environment STRING -ocp-apim-subscription-key STRING

Get the balance of the account
    -authorization STRING: 
    -x-target-environment STRING: 
    -ocp-apim-subscription-key STRING: 

Example:
    `+os.Args[0]+` getbalance show --authorization "Labore corporis qui ipsum." --x-target-environment "Blanditiis et doloribus." --ocp-apim-subscription-key "Soluta dolores voluptatem nulla odio ut."
`, os.Args[0])
}

// requestopayUsage displays the usage of the requestopay command and its
// subcommands.
func requestopayUsage() {
	fmt.Fprintf(os.Stderr, `Service is the requestopay service interface.
Usage:
    %s [globalflags] requestopay COMMAND [flags]

COMMAND:
    create: Request a payment from a consumer (Payer).
    get: Get the status of a request to pay.

Additional help:
    %s requestopay COMMAND --help
`, os.Args[0], os.Args[0])
}
func requestopayCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] requestopay create -authorization STRING -x-callback-url STRING -x-reference-id STRING -x-target-environment STRING -ocp-apim-subscription-key STRING

Request a payment from a consumer (Payer).
    -authorization STRING: 
    -x-callback-url STRING: 
    -x-reference-id STRING: 
    -x-target-environment STRING: 
    -ocp-apim-subscription-key STRING: 

Example:
    `+os.Args[0]+` requestopay create --authorization "Excepturi non suscipit rerum nobis quo necessitatibus." --x-callback-url "Iusto ea numquam voluptas vitae neque." --x-reference-id "Corporis dignissimos." --x-target-environment "Voluptas ipsam iure sunt." --ocp-apim-subscription-key "Cum cumque."
`, os.Args[0])
}

func requestopayGetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] requestopay get -reference-id STRING -authorization STRING -x-target-environment STRING -ocp-apim-subscription-key STRING

Get the status of a request to pay.
    -reference-id STRING:  UUID of transaction to get result
    -authorization STRING: 
    -x-target-environment STRING: 
    -ocp-apim-subscription-key STRING: 

Example:
    `+os.Args[0]+` requestopay get --reference-id "Blanditiis est minima nulla." --authorization "Expedita eius vitae sed odit ad." --x-target-environment "Et et labore." --ocp-apim-subscription-key "Nesciunt adipisci ipsam dolorem."
`, os.Args[0])
}

// tokenUsage displays the usage of the token command and its subcommands.
func tokenUsage() {
	fmt.Fprintf(os.Stderr, `Service is the token service interface.
Usage:
    %s [globalflags] token COMMAND [flags]

COMMAND:
    create: Creates an Access Token.

Additional help:
    %s token COMMAND --help
`, os.Args[0], os.Args[0])
}
func tokenCreateUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] token create -ocp-apim-subscription-key STRING -api-key STRING -api-secret STRING

Creates an Access Token.
    -ocp-apim-subscription-key STRING: 
    -api-key STRING: API Key
    -api-secret STRING: API Secret

Example:
    `+os.Args[0]+` token create --ocp-apim-subscription-key "Rerum consequatur maxime." --api-key "Et odit voluptates esse illo iure." --api-secret "Corrupti magni ut et."
`, os.Args[0])
}

// validateUsage displays the usage of the validate command and its subcommands.
func validateUsage() {
	fmt.Fprintf(os.Stderr, `Service is the validate service interface.
Usage:
    %s [globalflags] validate COMMAND [flags]

COMMAND:
    show: Checks if an account holder is registered and active in the system

Additional help:
    %s validate COMMAND --help
`, os.Args[0], os.Args[0])
}
func validateShowUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] validate show -account-holder-id-type STRING -account-holder-id STRING -authorization STRING -x-target-environment STRING -ocp-apim-subscription-key STRING

Checks if an account holder is registered and active in the system
    -account-holder-id-type STRING: Specifies the type of the party ID
    -account-holder-id STRING: The party number.
    -authorization STRING: 
    -x-target-environment STRING: 
    -ocp-apim-subscription-key STRING: 

Example:
    `+os.Args[0]+` validate show --account-holder-id-type "Corporis error numquam." --account-holder-id "Dolores iure deleniti et nobis aliquam magni." --authorization "Soluta soluta consequatur consequatur sint pariatur reiciendis." --x-target-environment "Numquam fugiat et." --ocp-apim-subscription-key "Ipsum enim."
`, os.Args[0])
}
