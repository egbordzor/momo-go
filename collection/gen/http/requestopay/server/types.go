// Code generated by goa v3.1.2, DO NOT EDIT.
//
// requestopay HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/momo-go/collection/design

package server

import (
	requestopay "github.com/wondenge/momo-go/collection/gen/requestopay"
	requestopayviews "github.com/wondenge/momo-go/collection/gen/requestopay/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateResponseBody is the type of the "requestopay" service "create"
// endpoint HTTP response body.
type CreateResponseBody struct {
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetResponseBody is the type of the "requestopay" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "requestopay" service
// "create" endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBadRequestResponseBody is the type of the "requestopay" service "get"
// endpoint HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "requestopay" service.
func NewCreateResponseBody(res *requestopayviews.ErrorreasonView) *CreateResponseBody {
	body := &CreateResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "requestopay" service.
func NewGetResponseBody(res *requestopayviews.ErrorreasonView) *GetResponseBody {
	body := &GetResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "requestopay" service.
func NewCreateBadRequestResponseBody(res *goa.ServiceError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "get" endpoint of the "requestopay" service.
func NewGetBadRequestResponseBody(res *goa.ServiceError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePayload builds a requestopay service create endpoint payload.
func NewCreatePayload(authorization *string, xCallbackURL *string, xReferenceID string, xTargetEnvironment string, ocpApimSubscriptionKey string) *requestopay.CreatePayload {
	v := &requestopay.CreatePayload{}
	v.Authorization = authorization
	v.XCallbackURL = xCallbackURL
	v.XReferenceID = xReferenceID
	v.XTargetEnvironment = xTargetEnvironment
	v.OcpApimSubscriptionKey = ocpApimSubscriptionKey

	return v
}

// NewGetPayload builds a requestopay service get endpoint payload.
func NewGetPayload(referenceID string, authorization *string, xTargetEnvironment string, ocpApimSubscriptionKey string) *requestopay.GetPayload {
	v := &requestopay.GetPayload{}
	v.ReferenceID = &referenceID
	v.Authorization = authorization
	v.XTargetEnvironment = xTargetEnvironment
	v.OcpApimSubscriptionKey = ocpApimSubscriptionKey

	return v
}
