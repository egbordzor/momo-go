// Code generated by goa v3.1.2, DO NOT EDIT.
//
// requestopay go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/momo-go/collection/design

package server

import (
	"context"
	"net/http"

	kithttp "github.com/go-kit/kit/transport/http"
	"github.com/wondenge/momo-go/collection/gen/http/requestopay/server"
	goahttp "goa.design/goa/v3/http"
)

// EncodeCreateResponse returns a go-kit EncodeResponseFunc suitable for
// encoding requestopay create responses.
func EncodeCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeCreateResponse(encoder)
}

// DecodeCreateRequest returns a go-kit DecodeRequestFunc suitable for decoding
// requestopay create requests.
func DecodeCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeCreateRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeCreateError returns a go-kit EncodeResponseFunc suitable for encoding
// errors returned by the requestopay create endpoint.
func EncodeCreateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeCreateError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}

// EncodeGetResponse returns a go-kit EncodeResponseFunc suitable for encoding
// requestopay get responses.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) kithttp.EncodeResponseFunc {
	return server.EncodeGetResponse(encoder)
}

// DecodeGetRequest returns a go-kit DecodeRequestFunc suitable for decoding
// requestopay get requests.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) kithttp.DecodeRequestFunc {
	dec := server.DecodeGetRequest(mux, decoder)
	return func(ctx context.Context, r *http.Request) (interface{}, error) {
		r = r.WithContext(ctx)
		return dec(r)
	}
}

// EncodeGetError returns a go-kit EncodeResponseFunc suitable for encoding
// errors returned by the requestopay get endpoint.
func EncodeGetError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) kithttp.ErrorEncoder {
	enc := server.EncodeGetError(encoder, formatter)
	return func(ctx context.Context, err error, w http.ResponseWriter) {
		enc(ctx, w, err)
	}
}
