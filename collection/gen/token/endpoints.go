// Code generated by goa v3.1.2, DO NOT EDIT.
//
// token endpoints
//
// Command:
// $ goa gen github.com/wondenge/momo-go/collection/design

package token

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "token" service endpoints.
type Endpoints struct {
	Create endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "token" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Create: NewCreateEndpoint(s, a.BasicAuth),
	}
}

// Use applies the given middleware to all the "token" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.Create = m(e.Create)
}

// NewCreateEndpoint returns an endpoint function that calls the method
// "create" of service "token".
func NewCreateEndpoint(s Service, authBasicFn security.AuthBasicFunc) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreatePayload)
		var err error
		sc := security.BasicScheme{
			Name:           "basic",
			Scopes:         []string{"api:read"},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.APIKey, p.APISecret, &sc)
		if err != nil {
			return nil, err
		}
		return s.Create(ctx, p)
	}
}
